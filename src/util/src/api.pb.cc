//// Generated by the protocol buffer compiler.  DO NOT EDIT!
//// source: api.proto
//
//#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
//#include "api.pb.h"
//
//#include <algorithm>
//
//#include <google/protobuf/stubs/common.h>
//#include <google/protobuf/stubs/port.h>
//#include <google/protobuf/stubs/once.h>
//#include <google/protobuf/io/coded_stream.h>
//#include <google/protobuf/wire_format_lite_inl.h>
//#include <google/protobuf/descriptor.h>
//#include <google/protobuf/generated_message_reflection.h>
//#include <google/protobuf/reflection_ops.h>
//#include <google/protobuf/wire_format.h>
//// @@protoc_insertion_point(includes)
//
//namespace monarcpb {
//
//namespace {
//
//const ::google::protobuf::Descriptor* ThreeAxis_descriptor_ = NULL;
//const ::google::protobuf::internal::GeneratedMessageReflection*
//  ThreeAxis_reflection_ = NULL;
//const ::google::protobuf::Descriptor* NavCPUToSysCtrl_descriptor_ = NULL;
//const ::google::protobuf::internal::GeneratedMessageReflection*
//  NavCPUToSysCtrl_reflection_ = NULL;
//const ::google::protobuf::Descriptor* NavCPUToSysCtrl_Telemetry_descriptor_ = NULL;
//const ::google::protobuf::internal::GeneratedMessageReflection*
//  NavCPUToSysCtrl_Telemetry_reflection_ = NULL;
//const ::google::protobuf::Descriptor* NavCPUToSysCtrl_AnalogSensors_descriptor_ = NULL;
//const ::google::protobuf::internal::GeneratedMessageReflection*
//  NavCPUToSysCtrl_AnalogSensors_reflection_ = NULL;
//const ::google::protobuf::Descriptor* NavCPUToSysCtrl_NavigationCommand_descriptor_ = NULL;
//const ::google::protobuf::internal::GeneratedMessageReflection*
//  NavCPUToSysCtrl_NavigationCommand_reflection_ = NULL;
//const ::google::protobuf::Descriptor* SysCtrlToNavCPU_descriptor_ = NULL;
//const ::google::protobuf::internal::GeneratedMessageReflection*
//  SysCtrlToNavCPU_reflection_ = NULL;
//const ::google::protobuf::Descriptor* SysCtrlToNavCPU_Telemetry_descriptor_ = NULL;
//const ::google::protobuf::internal::GeneratedMessageReflection*
//  SysCtrlToNavCPU_Telemetry_reflection_ = NULL;
//const ::google::protobuf::Descriptor* SysCtrlToNavCPU_ComputerState_descriptor_ = NULL;
//const ::google::protobuf::internal::GeneratedMessageReflection*
//  SysCtrlToNavCPU_ComputerState_reflection_ = NULL;
//const ::google::protobuf::Descriptor* SysCtrlToNavCPU_FlightControl_descriptor_ = NULL;
//const ::google::protobuf::internal::GeneratedMessageReflection*
//  SysCtrlToNavCPU_FlightControl_reflection_ = NULL;
//
//}  // namespace
//
//
//void protobuf_AssignDesc_api_2eproto() GOOGLE_ATTRIBUTE_COLD;
//void protobuf_AssignDesc_api_2eproto() {
//  protobuf_AddDesc_api_2eproto();
//  const ::google::protobuf::FileDescriptor* file =
//    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
//      "api.proto");
//  GOOGLE_CHECK(file != NULL);
//  ThreeAxis_descriptor_ = file->message_type(0);
//  static const int ThreeAxis_offsets_[3] = {
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreeAxis, x_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreeAxis, y_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreeAxis, z_),
//  };
//  ThreeAxis_reflection_ =
//    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
//      ThreeAxis_descriptor_,
//      ThreeAxis::default_instance_,
//      ThreeAxis_offsets_,
//      -1,
//      -1,
//      -1,
//      sizeof(ThreeAxis),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreeAxis, _internal_metadata_),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThreeAxis, _is_default_instance_));
//  NavCPUToSysCtrl_descriptor_ = file->message_type(1);
//  static const int NavCPUToSysCtrl_offsets_[3] = {
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl, telemetry_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl, analog_sensors_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl, command_),
//  };
//  NavCPUToSysCtrl_reflection_ =
//    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
//      NavCPUToSysCtrl_descriptor_,
//      NavCPUToSysCtrl::default_instance_,
//      NavCPUToSysCtrl_offsets_,
//      -1,
//      -1,
//      -1,
//      sizeof(NavCPUToSysCtrl),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl, _internal_metadata_),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl, _is_default_instance_));
//  NavCPUToSysCtrl_Telemetry_descriptor_ = NavCPUToSysCtrl_descriptor_->nested_type(0);
//  static const int NavCPUToSysCtrl_Telemetry_offsets_[5] = {
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_Telemetry, accelerometer_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_Telemetry, gyroscope_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_Telemetry, magnetometer_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_Telemetry, atmospheric_pressure_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_Telemetry, altitude_),
//  };
//  NavCPUToSysCtrl_Telemetry_reflection_ =
//    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
//      NavCPUToSysCtrl_Telemetry_descriptor_,
//      NavCPUToSysCtrl_Telemetry::default_instance_,
//      NavCPUToSysCtrl_Telemetry_offsets_,
//      -1,
//      -1,
//      -1,
//      sizeof(NavCPUToSysCtrl_Telemetry),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_Telemetry, _internal_metadata_),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_Telemetry, _is_default_instance_));
//  NavCPUToSysCtrl_AnalogSensors_descriptor_ = NavCPUToSysCtrl_descriptor_->nested_type(1);
//  static const int NavCPUToSysCtrl_AnalogSensors_offsets_[2] = {
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_AnalogSensors, current_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_AnalogSensors, voltage_),
//  };
//  NavCPUToSysCtrl_AnalogSensors_reflection_ =
//    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
//      NavCPUToSysCtrl_AnalogSensors_descriptor_,
//      NavCPUToSysCtrl_AnalogSensors::default_instance_,
//      NavCPUToSysCtrl_AnalogSensors_offsets_,
//      -1,
//      -1,
//      -1,
//      sizeof(NavCPUToSysCtrl_AnalogSensors),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_AnalogSensors, _internal_metadata_),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_AnalogSensors, _is_default_instance_));
//  NavCPUToSysCtrl_NavigationCommand_descriptor_ = NavCPUToSysCtrl_descriptor_->nested_type(2);
//  static const int NavCPUToSysCtrl_NavigationCommand_offsets_[1] = {
//  };
//  NavCPUToSysCtrl_NavigationCommand_reflection_ =
//    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
//      NavCPUToSysCtrl_NavigationCommand_descriptor_,
//      NavCPUToSysCtrl_NavigationCommand::default_instance_,
//      NavCPUToSysCtrl_NavigationCommand_offsets_,
//      -1,
//      -1,
//      -1,
//      sizeof(NavCPUToSysCtrl_NavigationCommand),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_NavigationCommand, _internal_metadata_),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavCPUToSysCtrl_NavigationCommand, _is_default_instance_));
//  SysCtrlToNavCPU_descriptor_ = file->message_type(2);
//  static const int SysCtrlToNavCPU_offsets_[3] = {
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU, telemetry_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU, state_),
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU, control_),
//  };
//  SysCtrlToNavCPU_reflection_ =
//    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
//      SysCtrlToNavCPU_descriptor_,
//      SysCtrlToNavCPU::default_instance_,
//      SysCtrlToNavCPU_offsets_,
//      -1,
//      -1,
//      -1,
//      sizeof(SysCtrlToNavCPU),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU, _internal_metadata_),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU, _is_default_instance_));
//  SysCtrlToNavCPU_Telemetry_descriptor_ = SysCtrlToNavCPU_descriptor_->nested_type(0);
//  static const int SysCtrlToNavCPU_Telemetry_offsets_[1] = {
//    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU_Telemetry, gps_),
//  };
//  SysCtrlToNavCPU_Telemetry_reflection_ =
//    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
//      SysCtrlToNavCPU_Telemetry_descriptor_,
//      SysCtrlToNavCPU_Telemetry::default_instance_,
//      SysCtrlToNavCPU_Telemetry_offsets_,
//      -1,
//      -1,
//      -1,
//      sizeof(SysCtrlToNavCPU_Telemetry),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU_Telemetry, _internal_metadata_),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU_Telemetry, _is_default_instance_));
//  SysCtrlToNavCPU_ComputerState_descriptor_ = SysCtrlToNavCPU_descriptor_->nested_type(1);
//  static const int SysCtrlToNavCPU_ComputerState_offsets_[1] = {
//  };
//  SysCtrlToNavCPU_ComputerState_reflection_ =
//    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
//      SysCtrlToNavCPU_ComputerState_descriptor_,
//      SysCtrlToNavCPU_ComputerState::default_instance_,
//      SysCtrlToNavCPU_ComputerState_offsets_,
//      -1,
//      -1,
//      -1,
//      sizeof(SysCtrlToNavCPU_ComputerState),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU_ComputerState, _internal_metadata_),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU_ComputerState, _is_default_instance_));
//  SysCtrlToNavCPU_FlightControl_descriptor_ = SysCtrlToNavCPU_descriptor_->nested_type(2);
//  static const int SysCtrlToNavCPU_FlightControl_offsets_[1] = {
//  };
//  SysCtrlToNavCPU_FlightControl_reflection_ =
//    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
//      SysCtrlToNavCPU_FlightControl_descriptor_,
//      SysCtrlToNavCPU_FlightControl::default_instance_,
//      SysCtrlToNavCPU_FlightControl_offsets_,
//      -1,
//      -1,
//      -1,
//      sizeof(SysCtrlToNavCPU_FlightControl),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU_FlightControl, _internal_metadata_),
//      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysCtrlToNavCPU_FlightControl, _is_default_instance_));
//}
//
//namespace {
//
//GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
//inline void protobuf_AssignDescriptorsOnce() {
//  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
//                 &protobuf_AssignDesc_api_2eproto);
//}
//
//void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
//void protobuf_RegisterTypes(const ::std::string&) {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
//      ThreeAxis_descriptor_, &ThreeAxis::default_instance());
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
//      NavCPUToSysCtrl_descriptor_, &NavCPUToSysCtrl::default_instance());
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
//      NavCPUToSysCtrl_Telemetry_descriptor_, &NavCPUToSysCtrl_Telemetry::default_instance());
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
//      NavCPUToSysCtrl_AnalogSensors_descriptor_, &NavCPUToSysCtrl_AnalogSensors::default_instance());
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
//      NavCPUToSysCtrl_NavigationCommand_descriptor_, &NavCPUToSysCtrl_NavigationCommand::default_instance());
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
//      SysCtrlToNavCPU_descriptor_, &SysCtrlToNavCPU::default_instance());
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
//      SysCtrlToNavCPU_Telemetry_descriptor_, &SysCtrlToNavCPU_Telemetry::default_instance());
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
//      SysCtrlToNavCPU_ComputerState_descriptor_, &SysCtrlToNavCPU_ComputerState::default_instance());
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
//      SysCtrlToNavCPU_FlightControl_descriptor_, &SysCtrlToNavCPU_FlightControl::default_instance());
//}
//
//}  // namespace
//
//void protobuf_ShutdownFile_api_2eproto() {
//  delete ThreeAxis::default_instance_;
//  delete ThreeAxis_reflection_;
//  delete NavCPUToSysCtrl::default_instance_;
//  delete NavCPUToSysCtrl_reflection_;
//  delete NavCPUToSysCtrl_Telemetry::default_instance_;
//  delete NavCPUToSysCtrl_Telemetry_reflection_;
//  delete NavCPUToSysCtrl_AnalogSensors::default_instance_;
//  delete NavCPUToSysCtrl_AnalogSensors_reflection_;
//  delete NavCPUToSysCtrl_NavigationCommand::default_instance_;
//  delete NavCPUToSysCtrl_NavigationCommand_reflection_;
//  delete SysCtrlToNavCPU::default_instance_;
//  delete SysCtrlToNavCPU_reflection_;
//  delete SysCtrlToNavCPU_Telemetry::default_instance_;
//  delete SysCtrlToNavCPU_Telemetry_reflection_;
//  delete SysCtrlToNavCPU_ComputerState::default_instance_;
//  delete SysCtrlToNavCPU_ComputerState_reflection_;
//  delete SysCtrlToNavCPU_FlightControl::default_instance_;
//  delete SysCtrlToNavCPU_FlightControl_reflection_;
//}
//
//void protobuf_AddDesc_api_2eproto() GOOGLE_ATTRIBUTE_COLD;
//void protobuf_AddDesc_api_2eproto() {
//  static bool already_here = false;
//  if (already_here) return;
//  already_here = true;
//  GOOGLE_PROTOBUF_VERIFY_VERSION;
//
//  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
//    "\n\tapi.proto\022\010monarcpb\",\n\tThreeAxis\022\t\n\001x\030"
//    "\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005\"\315\003\n\017NavCPUTo"
//    "SysCtrl\0226\n\ttelemetry\030\001 \001(\0132#.monarcpb.Na"
//    "vCPUToSysCtrl.Telemetry\022\?\n\016analog_sensor"
//    "s\030\002 \001(\0132\'.monarcpb.NavCPUToSysCtrl.Analo"
//    "gSensors\022<\n\007command\030\003 \001(\0132+.monarcpb.Nav"
//    "CPUToSysCtrl.NavigationCommand\032\272\001\n\tTelem"
//    "etry\022*\n\raccelerometer\030\001 \001(\0132\023.monarcpb.T"
//    "hreeAxis\022&\n\tgyroscope\030\002 \001(\0132\023.monarcpb.T"
//    "hreeAxis\022)\n\014magnetometer\030\003 \001(\0132\023.monarcp"
//    "b.ThreeAxis\022\034\n\024atmospheric_pressure\030\004 \001("
//    "\005\022\020\n\010altitude\030\005 \001(\005\0321\n\rAnalogSensors\022\017\n\007"
//    "current\030\001 \001(\005\022\017\n\007voltage\030\002 \001(\005\032\023\n\021Naviga"
//    "tionCommand\"\367\001\n\017SysCtrlToNavCPU\0226\n\ttelem"
//    "etry\030\001 \001(\0132#.monarcpb.SysCtrlToNavCPU.Te"
//    "lemetry\0226\n\005state\030\002 \001(\0132\'.monarcpb.SysCtr"
//    "lToNavCPU.ComputerState\0228\n\007control\030\003 \001(\013"
//    "2\'.monarcpb.SysCtrlToNavCPU.FlightContro"
//    "l\032\030\n\tTelemetry\022\013\n\003GPS\030\001 \001(\005\032\017\n\rComputerS"
//    "tate\032\017\n\rFlightControlb\006proto3", 789);
//  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
//    "api.proto", &protobuf_RegisterTypes);
//  ThreeAxis::default_instance_ = new ThreeAxis();
//  NavCPUToSysCtrl::default_instance_ = new NavCPUToSysCtrl();
//  NavCPUToSysCtrl_Telemetry::default_instance_ = new NavCPUToSysCtrl_Telemetry();
//  NavCPUToSysCtrl_AnalogSensors::default_instance_ = new NavCPUToSysCtrl_AnalogSensors();
//  NavCPUToSysCtrl_NavigationCommand::default_instance_ = new NavCPUToSysCtrl_NavigationCommand();
//  SysCtrlToNavCPU::default_instance_ = new SysCtrlToNavCPU();
//  SysCtrlToNavCPU_Telemetry::default_instance_ = new SysCtrlToNavCPU_Telemetry();
//  SysCtrlToNavCPU_ComputerState::default_instance_ = new SysCtrlToNavCPU_ComputerState();
//  SysCtrlToNavCPU_FlightControl::default_instance_ = new SysCtrlToNavCPU_FlightControl();
//  ThreeAxis::default_instance_->InitAsDefaultInstance();
//  NavCPUToSysCtrl::default_instance_->InitAsDefaultInstance();
//  NavCPUToSysCtrl_Telemetry::default_instance_->InitAsDefaultInstance();
//  NavCPUToSysCtrl_AnalogSensors::default_instance_->InitAsDefaultInstance();
//  NavCPUToSysCtrl_NavigationCommand::default_instance_->InitAsDefaultInstance();
//  SysCtrlToNavCPU::default_instance_->InitAsDefaultInstance();
//  SysCtrlToNavCPU_Telemetry::default_instance_->InitAsDefaultInstance();
//  SysCtrlToNavCPU_ComputerState::default_instance_->InitAsDefaultInstance();
//  SysCtrlToNavCPU_FlightControl::default_instance_->InitAsDefaultInstance();
//  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_api_2eproto);
//}
//
//// Force AddDescriptors() to be called at static initialization time.
//struct StaticDescriptorInitializer_api_2eproto {
//  StaticDescriptorInitializer_api_2eproto() {
//    protobuf_AddDesc_api_2eproto();
//  }
//} static_descriptor_initializer_api_2eproto_;
//
//// ===================================================================
//
//#if !defined(_MSC_VER) || _MSC_VER >= 1900
//const int ThreeAxis::kXFieldNumber;
//const int ThreeAxis::kYFieldNumber;
//const int ThreeAxis::kZFieldNumber;
//#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
//
//ThreeAxis::ThreeAxis()
//  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
//  SharedCtor();
//  // @@protoc_insertion_point(constructor:monarcpb.ThreeAxis)
//}
//
//void ThreeAxis::InitAsDefaultInstance() {
//  _is_default_instance_ = true;
//}
//
//ThreeAxis::ThreeAxis(const ThreeAxis& from)
//  : ::google::protobuf::Message(),
//    _internal_metadata_(NULL) {
//  SharedCtor();
//  MergeFrom(from);
//  // @@protoc_insertion_point(copy_constructor:monarcpb.ThreeAxis)
//}
//
//void ThreeAxis::SharedCtor() {
//    _is_default_instance_ = false;
//  _cached_size_ = 0;
//  x_ = 0;
//  y_ = 0;
//  z_ = 0;
//}
//
//ThreeAxis::~ThreeAxis() {
//  // @@protoc_insertion_point(destructor:monarcpb.ThreeAxis)
//  SharedDtor();
//}
//
//void ThreeAxis::SharedDtor() {
//  if (this != default_instance_) {
//  }
//}
//
//void ThreeAxis::SetCachedSize(int size) const {
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//}
//const ::google::protobuf::Descriptor* ThreeAxis::descriptor() {
//  protobuf_AssignDescriptorsOnce();
//  return ThreeAxis_descriptor_;
//}
//
//const ThreeAxis& ThreeAxis::default_instance() {
//  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
//  return *default_instance_;
//}
//
//ThreeAxis* ThreeAxis::default_instance_ = NULL;
//
//ThreeAxis* ThreeAxis::New(::google::protobuf::Arena* arena) const {
//  ThreeAxis* n = new ThreeAxis;
//  if (arena != NULL) {
//    arena->Own(n);
//  }
//  return n;
//}
//
//void ThreeAxis::Clear() {
//// @@protoc_insertion_point(message_clear_start:monarcpb.ThreeAxis)
//#if defined(__clang__)
//#define ZR_HELPER_(f) \
//  _Pragma("clang diagnostic push") \
//  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
//  __builtin_offsetof(ThreeAxis, f) \
//  _Pragma("clang diagnostic pop")
//#else
//#define ZR_HELPER_(f) reinterpret_cast<char*>(\
//  &reinterpret_cast<ThreeAxis*>(16)->f)
//#endif
//
//#define ZR_(first, last) do {\
//  ::memset(&(first), 0,\
//           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
//} while (0)
//
//  ZR_(x_, z_);
//
//#undef ZR_HELPER_
//#undef ZR_
//
//}
//
//bool ThreeAxis::MergePartialFromCodedStream(
//    ::google::protobuf::io::CodedInputStream* input) {
//#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
//  ::google::protobuf::uint32 tag;
//  // @@protoc_insertion_point(parse_start:monarcpb.ThreeAxis)
//  for (;;) {
//    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
//    tag = p.first;
//    if (!p.second) goto handle_unusual;
//    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
//      // optional int32 x = 1;
//      case 1: {
//        if (tag == 8) {
//          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
//                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
//                 input, &x_)));
//
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(16)) goto parse_y;
//        break;
//      }
//
//      // optional int32 y = 2;
//      case 2: {
//        if (tag == 16) {
//         parse_y:
//          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
//                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
//                 input, &y_)));
//
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(24)) goto parse_z;
//        break;
//      }
//
//      // optional int32 z = 3;
//      case 3: {
//        if (tag == 24) {
//         parse_z:
//          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
//                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
//                 input, &z_)));
//
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectAtEnd()) goto success;
//        break;
//      }
//
//      default: {
//      handle_unusual:
//        if (tag == 0 ||
//            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
//            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
//          goto success;
//        }
//        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
//        break;
//      }
//    }
//  }
//success:
//  // @@protoc_insertion_point(parse_success:monarcpb.ThreeAxis)
//  return true;
//failure:
//  // @@protoc_insertion_point(parse_failure:monarcpb.ThreeAxis)
//  return false;
//#undef DO_
//}
//
//void ThreeAxis::SerializeWithCachedSizes(
//    ::google::protobuf::io::CodedOutputStream* output) const {
//  // @@protoc_insertion_point(serialize_start:monarcpb.ThreeAxis)
//  // optional int32 x = 1;
//  if (this->x() != 0) {
//    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
//  }
//
//  // optional int32 y = 2;
//  if (this->y() != 0) {
//    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
//  }
//
//  // optional int32 z = 3;
//  if (this->z() != 0) {
//    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
//  }
//
//  // @@protoc_insertion_point(serialize_end:monarcpb.ThreeAxis)
//}
//
//::google::protobuf::uint8* ThreeAxis::InternalSerializeWithCachedSizesToArray(
//    bool deterministic, ::google::protobuf::uint8* target) const {
//  (void)deterministic; // Unused
//  // @@protoc_insertion_point(serialize_to_array_start:monarcpb.ThreeAxis)
//  // optional int32 x = 1;
//  if (this->x() != 0) {
//    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
//  }
//
//  // optional int32 y = 2;
//  if (this->y() != 0) {
//    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
//  }
//
//  // optional int32 z = 3;
//  if (this->z() != 0) {
//    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
//  }
//
//  // @@protoc_insertion_point(serialize_to_array_end:monarcpb.ThreeAxis)
//  return target;
//}
//
//int ThreeAxis::ByteSize() const {
//// @@protoc_insertion_point(message_byte_size_start:monarcpb.ThreeAxis)
//  int total_size = 0;
//
//  // optional int32 x = 1;
//  if (this->x() != 0) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::Int32Size(
//        this->x());
//  }
//
//  // optional int32 y = 2;
//  if (this->y() != 0) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::Int32Size(
//        this->y());
//  }
//
//  // optional int32 z = 3;
//  if (this->z() != 0) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::Int32Size(
//        this->z());
//  }
//
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = total_size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//  return total_size;
//}
//
//void ThreeAxis::MergeFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_merge_from_start:monarcpb.ThreeAxis)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  const ThreeAxis* source =
//      ::google::protobuf::internal::DynamicCastToGenerated<const ThreeAxis>(
//          &from);
//  if (source == NULL) {
//  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monarcpb.ThreeAxis)
//    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
//  } else {
//  // @@protoc_insertion_point(generalized_merge_from_cast_success:monarcpb.ThreeAxis)
//    MergeFrom(*source);
//  }
//}
//
//void ThreeAxis::MergeFrom(const ThreeAxis& from) {
//// @@protoc_insertion_point(class_specific_merge_from_start:monarcpb.ThreeAxis)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  if (from.x() != 0) {
//    set_x(from.x());
//  }
//  if (from.y() != 0) {
//    set_y(from.y());
//  }
//  if (from.z() != 0) {
//    set_z(from.z());
//  }
//}
//
//void ThreeAxis::CopyFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_copy_from_start:monarcpb.ThreeAxis)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//void ThreeAxis::CopyFrom(const ThreeAxis& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:monarcpb.ThreeAxis)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//bool ThreeAxis::IsInitialized() const {
//
//  return true;
//}
//
//void ThreeAxis::Swap(ThreeAxis* other) {
//  if (other == this) return;
//  InternalSwap(other);
//}
//void ThreeAxis::InternalSwap(ThreeAxis* other) {
//  std::swap(x_, other->x_);
//  std::swap(y_, other->y_);
//  std::swap(z_, other->z_);
//  _internal_metadata_.Swap(&other->_internal_metadata_);
//  std::swap(_cached_size_, other->_cached_size_);
//}
//
//::google::protobuf::Metadata ThreeAxis::GetMetadata() const {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::Metadata metadata;
//  metadata.descriptor = ThreeAxis_descriptor_;
//  metadata.reflection = ThreeAxis_reflection_;
//  return metadata;
//}
//
//#if PROTOBUF_INLINE_NOT_IN_HEADERS
//// ThreeAxis
//
//// optional int32 x = 1;
//void ThreeAxis::clear_x() {
//  x_ = 0;
//}
// ::google::protobuf::int32 ThreeAxis::x() const {
//  // @@protoc_insertion_point(field_get:monarcpb.ThreeAxis.x)
//  return x_;
//}
// void ThreeAxis::set_x(::google::protobuf::int32 value) {
//
//  x_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.ThreeAxis.x)
//}
//
//// optional int32 y = 2;
//void ThreeAxis::clear_y() {
//  y_ = 0;
//}
// ::google::protobuf::int32 ThreeAxis::y() const {
//  // @@protoc_insertion_point(field_get:monarcpb.ThreeAxis.y)
//  return y_;
//}
// void ThreeAxis::set_y(::google::protobuf::int32 value) {
//
//  y_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.ThreeAxis.y)
//}
//
//// optional int32 z = 3;
//void ThreeAxis::clear_z() {
//  z_ = 0;
//}
// ::google::protobuf::int32 ThreeAxis::z() const {
//  // @@protoc_insertion_point(field_get:monarcpb.ThreeAxis.z)
//  return z_;
//}
// void ThreeAxis::set_z(::google::protobuf::int32 value) {
//
//  z_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.ThreeAxis.z)
//}
//
//#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
//
//// ===================================================================
//
//#if !defined(_MSC_VER) || _MSC_VER >= 1900
//const int NavCPUToSysCtrl_Telemetry::kAccelerometerFieldNumber;
//const int NavCPUToSysCtrl_Telemetry::kGyroscopeFieldNumber;
//const int NavCPUToSysCtrl_Telemetry::kMagnetometerFieldNumber;
//const int NavCPUToSysCtrl_Telemetry::kAtmosphericPressureFieldNumber;
//const int NavCPUToSysCtrl_Telemetry::kAltitudeFieldNumber;
//#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
//
//NavCPUToSysCtrl_Telemetry::NavCPUToSysCtrl_Telemetry()
//  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
//  SharedCtor();
//  // @@protoc_insertion_point(constructor:monarcpb.NavCPUToSysCtrl.Telemetry)
//}
//
//void NavCPUToSysCtrl_Telemetry::InitAsDefaultInstance() {
//  _is_default_instance_ = true;
//  accelerometer_ = const_cast< ::monarcpb::ThreeAxis*>(&::monarcpb::ThreeAxis::default_instance());
//  gyroscope_ = const_cast< ::monarcpb::ThreeAxis*>(&::monarcpb::ThreeAxis::default_instance());
//  magnetometer_ = const_cast< ::monarcpb::ThreeAxis*>(&::monarcpb::ThreeAxis::default_instance());
//}
//
//NavCPUToSysCtrl_Telemetry::NavCPUToSysCtrl_Telemetry(const NavCPUToSysCtrl_Telemetry& from)
//  : ::google::protobuf::Message(),
//    _internal_metadata_(NULL) {
//  SharedCtor();
//  MergeFrom(from);
//  // @@protoc_insertion_point(copy_constructor:monarcpb.NavCPUToSysCtrl.Telemetry)
//}
//
//void NavCPUToSysCtrl_Telemetry::SharedCtor() {
//    _is_default_instance_ = false;
//  _cached_size_ = 0;
//  accelerometer_ = NULL;
//  gyroscope_ = NULL;
//  magnetometer_ = NULL;
//  atmospheric_pressure_ = 0;
//  altitude_ = 0;
//}
//
//NavCPUToSysCtrl_Telemetry::~NavCPUToSysCtrl_Telemetry() {
//  // @@protoc_insertion_point(destructor:monarcpb.NavCPUToSysCtrl.Telemetry)
//  SharedDtor();
//}
//
//void NavCPUToSysCtrl_Telemetry::SharedDtor() {
//  if (this != default_instance_) {
//    delete accelerometer_;
//    delete gyroscope_;
//    delete magnetometer_;
//  }
//}
//
//void NavCPUToSysCtrl_Telemetry::SetCachedSize(int size) const {
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//}
//const ::google::protobuf::Descriptor* NavCPUToSysCtrl_Telemetry::descriptor() {
//  protobuf_AssignDescriptorsOnce();
//  return NavCPUToSysCtrl_Telemetry_descriptor_;
//}
//
//const NavCPUToSysCtrl_Telemetry& NavCPUToSysCtrl_Telemetry::default_instance() {
//  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
//  return *default_instance_;
//}
//
//NavCPUToSysCtrl_Telemetry* NavCPUToSysCtrl_Telemetry::default_instance_ = NULL;
//
//NavCPUToSysCtrl_Telemetry* NavCPUToSysCtrl_Telemetry::New(::google::protobuf::Arena* arena) const {
//  NavCPUToSysCtrl_Telemetry* n = new NavCPUToSysCtrl_Telemetry;
//  if (arena != NULL) {
//    arena->Own(n);
//  }
//  return n;
//}
//
//void NavCPUToSysCtrl_Telemetry::Clear() {
//// @@protoc_insertion_point(message_clear_start:monarcpb.NavCPUToSysCtrl.Telemetry)
//#if defined(__clang__)
//#define ZR_HELPER_(f) \
//  _Pragma("clang diagnostic push") \
//  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
//  __builtin_offsetof(NavCPUToSysCtrl_Telemetry, f) \
//  _Pragma("clang diagnostic pop")
//#else
//#define ZR_HELPER_(f) reinterpret_cast<char*>(\
//  &reinterpret_cast<NavCPUToSysCtrl_Telemetry*>(16)->f)
//#endif
//
//#define ZR_(first, last) do {\
//  ::memset(&(first), 0,\
//           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
//} while (0)
//
//  ZR_(atmospheric_pressure_, altitude_);
//  if (GetArenaNoVirtual() == NULL && accelerometer_ != NULL) delete accelerometer_;
//  accelerometer_ = NULL;
//  if (GetArenaNoVirtual() == NULL && gyroscope_ != NULL) delete gyroscope_;
//  gyroscope_ = NULL;
//  if (GetArenaNoVirtual() == NULL && magnetometer_ != NULL) delete magnetometer_;
//  magnetometer_ = NULL;
//
//#undef ZR_HELPER_
//#undef ZR_
//
//}
//
//bool NavCPUToSysCtrl_Telemetry::MergePartialFromCodedStream(
//    ::google::protobuf::io::CodedInputStream* input) {
//#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
//  ::google::protobuf::uint32 tag;
//  // @@protoc_insertion_point(parse_start:monarcpb.NavCPUToSysCtrl.Telemetry)
//  for (;;) {
//    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
//    tag = p.first;
//    if (!p.second) goto handle_unusual;
//    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
//      // optional .monarcpb.ThreeAxis accelerometer = 1;
//      case 1: {
//        if (tag == 10) {
//          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
//               input, mutable_accelerometer()));
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(18)) goto parse_gyroscope;
//        break;
//      }
//
//      // optional .monarcpb.ThreeAxis gyroscope = 2;
//      case 2: {
//        if (tag == 18) {
//         parse_gyroscope:
//          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
//               input, mutable_gyroscope()));
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(26)) goto parse_magnetometer;
//        break;
//      }
//
//      // optional .monarcpb.ThreeAxis magnetometer = 3;
//      case 3: {
//        if (tag == 26) {
//         parse_magnetometer:
//          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
//               input, mutable_magnetometer()));
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(32)) goto parse_atmospheric_pressure;
//        break;
//      }
//
//      // optional int32 atmospheric_pressure = 4;
//      case 4: {
//        if (tag == 32) {
//         parse_atmospheric_pressure:
//          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
//                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
//                 input, &atmospheric_pressure_)));
//
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(40)) goto parse_altitude;
//        break;
//      }
//
//      // optional int32 altitude = 5;
//      case 5: {
//        if (tag == 40) {
//         parse_altitude:
//          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
//                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
//                 input, &altitude_)));
//
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectAtEnd()) goto success;
//        break;
//      }
//
//      default: {
//      handle_unusual:
//        if (tag == 0 ||
//            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
//            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
//          goto success;
//        }
//        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
//        break;
//      }
//    }
//  }
//success:
//  // @@protoc_insertion_point(parse_success:monarcpb.NavCPUToSysCtrl.Telemetry)
//  return true;
//failure:
//  // @@protoc_insertion_point(parse_failure:monarcpb.NavCPUToSysCtrl.Telemetry)
//  return false;
//#undef DO_
//}
//
//void NavCPUToSysCtrl_Telemetry::SerializeWithCachedSizes(
//    ::google::protobuf::io::CodedOutputStream* output) const {
//  // @@protoc_insertion_point(serialize_start:monarcpb.NavCPUToSysCtrl.Telemetry)
//  // optional .monarcpb.ThreeAxis accelerometer = 1;
//  if (this->has_accelerometer()) {
//    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
//      1, *this->accelerometer_, output);
//  }
//
//  // optional .monarcpb.ThreeAxis gyroscope = 2;
//  if (this->has_gyroscope()) {
//    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
//      2, *this->gyroscope_, output);
//  }
//
//  // optional .monarcpb.ThreeAxis magnetometer = 3;
//  if (this->has_magnetometer()) {
//    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
//      3, *this->magnetometer_, output);
//  }
//
//  // optional int32 atmospheric_pressure = 4;
//  if (this->atmospheric_pressure() != 0) {
//    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->atmospheric_pressure(), output);
//  }
//
//  // optional int32 altitude = 5;
//  if (this->altitude() != 0) {
//    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->altitude(), output);
//  }
//
//  // @@protoc_insertion_point(serialize_end:monarcpb.NavCPUToSysCtrl.Telemetry)
//}
//
//::google::protobuf::uint8* NavCPUToSysCtrl_Telemetry::InternalSerializeWithCachedSizesToArray(
//    bool deterministic, ::google::protobuf::uint8* target) const {
//  (void)deterministic; // Unused
//  // @@protoc_insertion_point(serialize_to_array_start:monarcpb.NavCPUToSysCtrl.Telemetry)
//  // optional .monarcpb.ThreeAxis accelerometer = 1;
//  if (this->has_accelerometer()) {
//    target = ::google::protobuf::internal::WireFormatLite::
//      InternalWriteMessageNoVirtualToArray(
//        1, *this->accelerometer_, false, target);
//  }
//
//  // optional .monarcpb.ThreeAxis gyroscope = 2;
//  if (this->has_gyroscope()) {
//    target = ::google::protobuf::internal::WireFormatLite::
//      InternalWriteMessageNoVirtualToArray(
//        2, *this->gyroscope_, false, target);
//  }
//
//  // optional .monarcpb.ThreeAxis magnetometer = 3;
//  if (this->has_magnetometer()) {
//    target = ::google::protobuf::internal::WireFormatLite::
//      InternalWriteMessageNoVirtualToArray(
//        3, *this->magnetometer_, false, target);
//  }
//
//  // optional int32 atmospheric_pressure = 4;
//  if (this->atmospheric_pressure() != 0) {
//    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->atmospheric_pressure(), target);
//  }
//
//  // optional int32 altitude = 5;
//  if (this->altitude() != 0) {
//    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->altitude(), target);
//  }
//
//  // @@protoc_insertion_point(serialize_to_array_end:monarcpb.NavCPUToSysCtrl.Telemetry)
//  return target;
//}
//
//int NavCPUToSysCtrl_Telemetry::ByteSize() const {
//// @@protoc_insertion_point(message_byte_size_start:monarcpb.NavCPUToSysCtrl.Telemetry)
//  int total_size = 0;
//
//  // optional .monarcpb.ThreeAxis accelerometer = 1;
//  if (this->has_accelerometer()) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
//        *this->accelerometer_);
//  }
//
//  // optional .monarcpb.ThreeAxis gyroscope = 2;
//  if (this->has_gyroscope()) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
//        *this->gyroscope_);
//  }
//
//  // optional .monarcpb.ThreeAxis magnetometer = 3;
//  if (this->has_magnetometer()) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
//        *this->magnetometer_);
//  }
//
//  // optional int32 atmospheric_pressure = 4;
//  if (this->atmospheric_pressure() != 0) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::Int32Size(
//        this->atmospheric_pressure());
//  }
//
//  // optional int32 altitude = 5;
//  if (this->altitude() != 0) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::Int32Size(
//        this->altitude());
//  }
//
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = total_size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//  return total_size;
//}
//
//void NavCPUToSysCtrl_Telemetry::MergeFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_merge_from_start:monarcpb.NavCPUToSysCtrl.Telemetry)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  const NavCPUToSysCtrl_Telemetry* source =
//      ::google::protobuf::internal::DynamicCastToGenerated<const NavCPUToSysCtrl_Telemetry>(
//          &from);
//  if (source == NULL) {
//  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monarcpb.NavCPUToSysCtrl.Telemetry)
//    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
//  } else {
//  // @@protoc_insertion_point(generalized_merge_from_cast_success:monarcpb.NavCPUToSysCtrl.Telemetry)
//    MergeFrom(*source);
//  }
//}
//
//void NavCPUToSysCtrl_Telemetry::MergeFrom(const NavCPUToSysCtrl_Telemetry& from) {
//// @@protoc_insertion_point(class_specific_merge_from_start:monarcpb.NavCPUToSysCtrl.Telemetry)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  if (from.has_accelerometer()) {
//    mutable_accelerometer()->::monarcpb::ThreeAxis::MergeFrom(from.accelerometer());
//  }
//  if (from.has_gyroscope()) {
//    mutable_gyroscope()->::monarcpb::ThreeAxis::MergeFrom(from.gyroscope());
//  }
//  if (from.has_magnetometer()) {
//    mutable_magnetometer()->::monarcpb::ThreeAxis::MergeFrom(from.magnetometer());
//  }
//  if (from.atmospheric_pressure() != 0) {
//    set_atmospheric_pressure(from.atmospheric_pressure());
//  }
//  if (from.altitude() != 0) {
//    set_altitude(from.altitude());
//  }
//}
//
//void NavCPUToSysCtrl_Telemetry::CopyFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_copy_from_start:monarcpb.NavCPUToSysCtrl.Telemetry)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//void NavCPUToSysCtrl_Telemetry::CopyFrom(const NavCPUToSysCtrl_Telemetry& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:monarcpb.NavCPUToSysCtrl.Telemetry)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//bool NavCPUToSysCtrl_Telemetry::IsInitialized() const {
//
//  return true;
//}
//
//void NavCPUToSysCtrl_Telemetry::Swap(NavCPUToSysCtrl_Telemetry* other) {
//  if (other == this) return;
//  InternalSwap(other);
//}
//void NavCPUToSysCtrl_Telemetry::InternalSwap(NavCPUToSysCtrl_Telemetry* other) {
//  std::swap(accelerometer_, other->accelerometer_);
//  std::swap(gyroscope_, other->gyroscope_);
//  std::swap(magnetometer_, other->magnetometer_);
//  std::swap(atmospheric_pressure_, other->atmospheric_pressure_);
//  std::swap(altitude_, other->altitude_);
//  _internal_metadata_.Swap(&other->_internal_metadata_);
//  std::swap(_cached_size_, other->_cached_size_);
//}
//
//::google::protobuf::Metadata NavCPUToSysCtrl_Telemetry::GetMetadata() const {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::Metadata metadata;
//  metadata.descriptor = NavCPUToSysCtrl_Telemetry_descriptor_;
//  metadata.reflection = NavCPUToSysCtrl_Telemetry_reflection_;
//  return metadata;
//}
//
//
//// -------------------------------------------------------------------
//
//#if !defined(_MSC_VER) || _MSC_VER >= 1900
//const int NavCPUToSysCtrl_AnalogSensors::kCurrentFieldNumber;
//const int NavCPUToSysCtrl_AnalogSensors::kVoltageFieldNumber;
//#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
//
//NavCPUToSysCtrl_AnalogSensors::NavCPUToSysCtrl_AnalogSensors()
//  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
//  SharedCtor();
//  // @@protoc_insertion_point(constructor:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//}
//
//void NavCPUToSysCtrl_AnalogSensors::InitAsDefaultInstance() {
//  _is_default_instance_ = true;
//}
//
//NavCPUToSysCtrl_AnalogSensors::NavCPUToSysCtrl_AnalogSensors(const NavCPUToSysCtrl_AnalogSensors& from)
//  : ::google::protobuf::Message(),
//    _internal_metadata_(NULL) {
//  SharedCtor();
//  MergeFrom(from);
//  // @@protoc_insertion_point(copy_constructor:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//}
//
//void NavCPUToSysCtrl_AnalogSensors::SharedCtor() {
//    _is_default_instance_ = false;
//  _cached_size_ = 0;
//  current_ = 0;
//  voltage_ = 0;
//}
//
//NavCPUToSysCtrl_AnalogSensors::~NavCPUToSysCtrl_AnalogSensors() {
//  // @@protoc_insertion_point(destructor:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  SharedDtor();
//}
//
//void NavCPUToSysCtrl_AnalogSensors::SharedDtor() {
//  if (this != default_instance_) {
//  }
//}
//
//void NavCPUToSysCtrl_AnalogSensors::SetCachedSize(int size) const {
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//}
//const ::google::protobuf::Descriptor* NavCPUToSysCtrl_AnalogSensors::descriptor() {
//  protobuf_AssignDescriptorsOnce();
//  return NavCPUToSysCtrl_AnalogSensors_descriptor_;
//}
//
//const NavCPUToSysCtrl_AnalogSensors& NavCPUToSysCtrl_AnalogSensors::default_instance() {
//  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
//  return *default_instance_;
//}
//
//NavCPUToSysCtrl_AnalogSensors* NavCPUToSysCtrl_AnalogSensors::default_instance_ = NULL;
//
//NavCPUToSysCtrl_AnalogSensors* NavCPUToSysCtrl_AnalogSensors::New(::google::protobuf::Arena* arena) const {
//  NavCPUToSysCtrl_AnalogSensors* n = new NavCPUToSysCtrl_AnalogSensors;
//  if (arena != NULL) {
//    arena->Own(n);
//  }
//  return n;
//}
//
//void NavCPUToSysCtrl_AnalogSensors::Clear() {
//// @@protoc_insertion_point(message_clear_start:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//#if defined(__clang__)
//#define ZR_HELPER_(f) \
//  _Pragma("clang diagnostic push") \
//  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
//  __builtin_offsetof(NavCPUToSysCtrl_AnalogSensors, f) \
//  _Pragma("clang diagnostic pop")
//#else
//#define ZR_HELPER_(f) reinterpret_cast<char*>(\
//  &reinterpret_cast<NavCPUToSysCtrl_AnalogSensors*>(16)->f)
//#endif
//
//#define ZR_(first, last) do {\
//  ::memset(&(first), 0,\
//           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
//} while (0)
//
//  ZR_(current_, voltage_);
//
//#undef ZR_HELPER_
//#undef ZR_
//
//}
//
//bool NavCPUToSysCtrl_AnalogSensors::MergePartialFromCodedStream(
//    ::google::protobuf::io::CodedInputStream* input) {
//#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
//  ::google::protobuf::uint32 tag;
//  // @@protoc_insertion_point(parse_start:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  for (;;) {
//    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
//    tag = p.first;
//    if (!p.second) goto handle_unusual;
//    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
//      // optional int32 current = 1;
//      case 1: {
//        if (tag == 8) {
//          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
//                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
//                 input, &current_)));
//
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(16)) goto parse_voltage;
//        break;
//      }
//
//      // optional int32 voltage = 2;
//      case 2: {
//        if (tag == 16) {
//         parse_voltage:
//          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
//                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
//                 input, &voltage_)));
//
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectAtEnd()) goto success;
//        break;
//      }
//
//      default: {
//      handle_unusual:
//        if (tag == 0 ||
//            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
//            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
//          goto success;
//        }
//        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
//        break;
//      }
//    }
//  }
//success:
//  // @@protoc_insertion_point(parse_success:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  return true;
//failure:
//  // @@protoc_insertion_point(parse_failure:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  return false;
//#undef DO_
//}
//
//void NavCPUToSysCtrl_AnalogSensors::SerializeWithCachedSizes(
//    ::google::protobuf::io::CodedOutputStream* output) const {
//  // @@protoc_insertion_point(serialize_start:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  // optional int32 current = 1;
//  if (this->current() != 0) {
//    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current(), output);
//  }
//
//  // optional int32 voltage = 2;
//  if (this->voltage() != 0) {
//    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->voltage(), output);
//  }
//
//  // @@protoc_insertion_point(serialize_end:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//}
//
//::google::protobuf::uint8* NavCPUToSysCtrl_AnalogSensors::InternalSerializeWithCachedSizesToArray(
//    bool deterministic, ::google::protobuf::uint8* target) const {
//  (void)deterministic; // Unused
//  // @@protoc_insertion_point(serialize_to_array_start:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  // optional int32 current = 1;
//  if (this->current() != 0) {
//    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current(), target);
//  }
//
//  // optional int32 voltage = 2;
//  if (this->voltage() != 0) {
//    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->voltage(), target);
//  }
//
//  // @@protoc_insertion_point(serialize_to_array_end:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  return target;
//}
//
//int NavCPUToSysCtrl_AnalogSensors::ByteSize() const {
//// @@protoc_insertion_point(message_byte_size_start:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  int total_size = 0;
//
//  // optional int32 current = 1;
//  if (this->current() != 0) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::Int32Size(
//        this->current());
//  }
//
//  // optional int32 voltage = 2;
//  if (this->voltage() != 0) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::Int32Size(
//        this->voltage());
//  }
//
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = total_size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//  return total_size;
//}
//
//void NavCPUToSysCtrl_AnalogSensors::MergeFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_merge_from_start:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  const NavCPUToSysCtrl_AnalogSensors* source =
//      ::google::protobuf::internal::DynamicCastToGenerated<const NavCPUToSysCtrl_AnalogSensors>(
//          &from);
//  if (source == NULL) {
//  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
//  } else {
//  // @@protoc_insertion_point(generalized_merge_from_cast_success:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//    MergeFrom(*source);
//  }
//}
//
//void NavCPUToSysCtrl_AnalogSensors::MergeFrom(const NavCPUToSysCtrl_AnalogSensors& from) {
//// @@protoc_insertion_point(class_specific_merge_from_start:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  if (from.current() != 0) {
//    set_current(from.current());
//  }
//  if (from.voltage() != 0) {
//    set_voltage(from.voltage());
//  }
//}
//
//void NavCPUToSysCtrl_AnalogSensors::CopyFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_copy_from_start:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//void NavCPUToSysCtrl_AnalogSensors::CopyFrom(const NavCPUToSysCtrl_AnalogSensors& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:monarcpb.NavCPUToSysCtrl.AnalogSensors)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//bool NavCPUToSysCtrl_AnalogSensors::IsInitialized() const {
//
//  return true;
//}
//
//void NavCPUToSysCtrl_AnalogSensors::Swap(NavCPUToSysCtrl_AnalogSensors* other) {
//  if (other == this) return;
//  InternalSwap(other);
//}
//void NavCPUToSysCtrl_AnalogSensors::InternalSwap(NavCPUToSysCtrl_AnalogSensors* other) {
//  std::swap(current_, other->current_);
//  std::swap(voltage_, other->voltage_);
//  _internal_metadata_.Swap(&other->_internal_metadata_);
//  std::swap(_cached_size_, other->_cached_size_);
//}
//
//::google::protobuf::Metadata NavCPUToSysCtrl_AnalogSensors::GetMetadata() const {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::Metadata metadata;
//  metadata.descriptor = NavCPUToSysCtrl_AnalogSensors_descriptor_;
//  metadata.reflection = NavCPUToSysCtrl_AnalogSensors_reflection_;
//  return metadata;
//}
//
//
//// -------------------------------------------------------------------
//
//#if !defined(_MSC_VER) || _MSC_VER >= 1900
//#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
//
//NavCPUToSysCtrl_NavigationCommand::NavCPUToSysCtrl_NavigationCommand()
//  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
//  SharedCtor();
//  // @@protoc_insertion_point(constructor:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//}
//
//void NavCPUToSysCtrl_NavigationCommand::InitAsDefaultInstance() {
//  _is_default_instance_ = true;
//}
//
//NavCPUToSysCtrl_NavigationCommand::NavCPUToSysCtrl_NavigationCommand(const NavCPUToSysCtrl_NavigationCommand& from)
//  : ::google::protobuf::Message(),
//    _internal_metadata_(NULL) {
//  SharedCtor();
//  MergeFrom(from);
//  // @@protoc_insertion_point(copy_constructor:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//}
//
//void NavCPUToSysCtrl_NavigationCommand::SharedCtor() {
//    _is_default_instance_ = false;
//  _cached_size_ = 0;
//}
//
//NavCPUToSysCtrl_NavigationCommand::~NavCPUToSysCtrl_NavigationCommand() {
//  // @@protoc_insertion_point(destructor:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  SharedDtor();
//}
//
//void NavCPUToSysCtrl_NavigationCommand::SharedDtor() {
//  if (this != default_instance_) {
//  }
//}
//
//void NavCPUToSysCtrl_NavigationCommand::SetCachedSize(int size) const {
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//}
//const ::google::protobuf::Descriptor* NavCPUToSysCtrl_NavigationCommand::descriptor() {
//  protobuf_AssignDescriptorsOnce();
//  return NavCPUToSysCtrl_NavigationCommand_descriptor_;
//}
//
//const NavCPUToSysCtrl_NavigationCommand& NavCPUToSysCtrl_NavigationCommand::default_instance() {
//  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
//  return *default_instance_;
//}
//
//NavCPUToSysCtrl_NavigationCommand* NavCPUToSysCtrl_NavigationCommand::default_instance_ = NULL;
//
//NavCPUToSysCtrl_NavigationCommand* NavCPUToSysCtrl_NavigationCommand::New(::google::protobuf::Arena* arena) const {
//  NavCPUToSysCtrl_NavigationCommand* n = new NavCPUToSysCtrl_NavigationCommand;
//  if (arena != NULL) {
//    arena->Own(n);
//  }
//  return n;
//}
//
//void NavCPUToSysCtrl_NavigationCommand::Clear() {
//// @@protoc_insertion_point(message_clear_start:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//}
//
//bool NavCPUToSysCtrl_NavigationCommand::MergePartialFromCodedStream(
//    ::google::protobuf::io::CodedInputStream* input) {
//#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
//  ::google::protobuf::uint32 tag;
//  // @@protoc_insertion_point(parse_start:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  for (;;) {
//    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
//    tag = p.first;
//    if (!p.second) goto handle_unusual;
//  handle_unusual:
//    if (tag == 0 ||
//        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
//        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
//      goto success;
//    }
//    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
//  }
//success:
//  // @@protoc_insertion_point(parse_success:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  return true;
//failure:
//  // @@protoc_insertion_point(parse_failure:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  return false;
//#undef DO_
//}
//
//void NavCPUToSysCtrl_NavigationCommand::SerializeWithCachedSizes(
//    ::google::protobuf::io::CodedOutputStream* output) const {
//  // @@protoc_insertion_point(serialize_start:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  // @@protoc_insertion_point(serialize_end:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//}
//
//::google::protobuf::uint8* NavCPUToSysCtrl_NavigationCommand::InternalSerializeWithCachedSizesToArray(
//    bool deterministic, ::google::protobuf::uint8* target) const {
//  (void)deterministic; // Unused
//  // @@protoc_insertion_point(serialize_to_array_start:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  // @@protoc_insertion_point(serialize_to_array_end:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  return target;
//}
//
//int NavCPUToSysCtrl_NavigationCommand::ByteSize() const {
//// @@protoc_insertion_point(message_byte_size_start:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  int total_size = 0;
//
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = total_size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//  return total_size;
//}
//
//void NavCPUToSysCtrl_NavigationCommand::MergeFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_merge_from_start:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  const NavCPUToSysCtrl_NavigationCommand* source =
//      ::google::protobuf::internal::DynamicCastToGenerated<const NavCPUToSysCtrl_NavigationCommand>(
//          &from);
//  if (source == NULL) {
//  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
//  } else {
//  // @@protoc_insertion_point(generalized_merge_from_cast_success:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//    MergeFrom(*source);
//  }
//}
//
//void NavCPUToSysCtrl_NavigationCommand::MergeFrom(const NavCPUToSysCtrl_NavigationCommand& from) {
//// @@protoc_insertion_point(class_specific_merge_from_start:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//}
//
//void NavCPUToSysCtrl_NavigationCommand::CopyFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_copy_from_start:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//void NavCPUToSysCtrl_NavigationCommand::CopyFrom(const NavCPUToSysCtrl_NavigationCommand& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:monarcpb.NavCPUToSysCtrl.NavigationCommand)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//bool NavCPUToSysCtrl_NavigationCommand::IsInitialized() const {
//
//  return true;
//}
//
//void NavCPUToSysCtrl_NavigationCommand::Swap(NavCPUToSysCtrl_NavigationCommand* other) {
//  if (other == this) return;
//  InternalSwap(other);
//}
//void NavCPUToSysCtrl_NavigationCommand::InternalSwap(NavCPUToSysCtrl_NavigationCommand* other) {
//  _internal_metadata_.Swap(&other->_internal_metadata_);
//  std::swap(_cached_size_, other->_cached_size_);
//}
//
//::google::protobuf::Metadata NavCPUToSysCtrl_NavigationCommand::GetMetadata() const {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::Metadata metadata;
//  metadata.descriptor = NavCPUToSysCtrl_NavigationCommand_descriptor_;
//  metadata.reflection = NavCPUToSysCtrl_NavigationCommand_reflection_;
//  return metadata;
//}
//
//
//// -------------------------------------------------------------------
//
//#if !defined(_MSC_VER) || _MSC_VER >= 1900
//const int NavCPUToSysCtrl::kTelemetryFieldNumber;
//const int NavCPUToSysCtrl::kAnalogSensorsFieldNumber;
//const int NavCPUToSysCtrl::kCommandFieldNumber;
//#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
//
//NavCPUToSysCtrl::NavCPUToSysCtrl()
//  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
//  SharedCtor();
//  // @@protoc_insertion_point(constructor:monarcpb.NavCPUToSysCtrl)
//}
//
//void NavCPUToSysCtrl::InitAsDefaultInstance() {
//  _is_default_instance_ = true;
//  telemetry_ = const_cast< ::monarcpb::NavCPUToSysCtrl_Telemetry*>(&::monarcpb::NavCPUToSysCtrl_Telemetry::default_instance());
//  analog_sensors_ = const_cast< ::monarcpb::NavCPUToSysCtrl_AnalogSensors*>(&::monarcpb::NavCPUToSysCtrl_AnalogSensors::default_instance());
//  command_ = const_cast< ::monarcpb::NavCPUToSysCtrl_NavigationCommand*>(&::monarcpb::NavCPUToSysCtrl_NavigationCommand::default_instance());
//}
//
//NavCPUToSysCtrl::NavCPUToSysCtrl(const NavCPUToSysCtrl& from)
//  : ::google::protobuf::Message(),
//    _internal_metadata_(NULL) {
//  SharedCtor();
//  MergeFrom(from);
//  // @@protoc_insertion_point(copy_constructor:monarcpb.NavCPUToSysCtrl)
//}
//
//void NavCPUToSysCtrl::SharedCtor() {
//    _is_default_instance_ = false;
//  _cached_size_ = 0;
//  telemetry_ = NULL;
//  analog_sensors_ = NULL;
//  command_ = NULL;
//}
//
//NavCPUToSysCtrl::~NavCPUToSysCtrl() {
//  // @@protoc_insertion_point(destructor:monarcpb.NavCPUToSysCtrl)
//  SharedDtor();
//}
//
//void NavCPUToSysCtrl::SharedDtor() {
//  if (this != default_instance_) {
//    delete telemetry_;
//    delete analog_sensors_;
//    delete command_;
//  }
//}
//
//void NavCPUToSysCtrl::SetCachedSize(int size) const {
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//}
//const ::google::protobuf::Descriptor* NavCPUToSysCtrl::descriptor() {
//  protobuf_AssignDescriptorsOnce();
//  return NavCPUToSysCtrl_descriptor_;
//}
//
//const NavCPUToSysCtrl& NavCPUToSysCtrl::default_instance() {
//  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
//  return *default_instance_;
//}
//
//NavCPUToSysCtrl* NavCPUToSysCtrl::default_instance_ = NULL;
//
//NavCPUToSysCtrl* NavCPUToSysCtrl::New(::google::protobuf::Arena* arena) const {
//  NavCPUToSysCtrl* n = new NavCPUToSysCtrl;
//  if (arena != NULL) {
//    arena->Own(n);
//  }
//  return n;
//}
//
//void NavCPUToSysCtrl::Clear() {
//// @@protoc_insertion_point(message_clear_start:monarcpb.NavCPUToSysCtrl)
//  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
//  telemetry_ = NULL;
//  if (GetArenaNoVirtual() == NULL && analog_sensors_ != NULL) delete analog_sensors_;
//  analog_sensors_ = NULL;
//  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
//  command_ = NULL;
//}
//
//bool NavCPUToSysCtrl::MergePartialFromCodedStream(
//    ::google::protobuf::io::CodedInputStream* input) {
//#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
//  ::google::protobuf::uint32 tag;
//  // @@protoc_insertion_point(parse_start:monarcpb.NavCPUToSysCtrl)
//  for (;;) {
//    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
//    tag = p.first;
//    if (!p.second) goto handle_unusual;
//    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
//      // optional .monarcpb.NavCPUToSysCtrl.Telemetry telemetry = 1;
//      case 1: {
//        if (tag == 10) {
//          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
//               input, mutable_telemetry()));
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(18)) goto parse_analog_sensors;
//        break;
//      }
//
//      // optional .monarcpb.NavCPUToSysCtrl.AnalogSensors analog_sensors = 2;
//      case 2: {
//        if (tag == 18) {
//         parse_analog_sensors:
//          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
//               input, mutable_analog_sensors()));
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(26)) goto parse_command;
//        break;
//      }
//
//      // optional .monarcpb.NavCPUToSysCtrl.NavigationCommand command = 3;
//      case 3: {
//        if (tag == 26) {
//         parse_command:
//          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
//               input, mutable_command()));
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectAtEnd()) goto success;
//        break;
//      }
//
//      default: {
//      handle_unusual:
//        if (tag == 0 ||
//            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
//            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
//          goto success;
//        }
//        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
//        break;
//      }
//    }
//  }
//success:
//  // @@protoc_insertion_point(parse_success:monarcpb.NavCPUToSysCtrl)
//  return true;
//failure:
//  // @@protoc_insertion_point(parse_failure:monarcpb.NavCPUToSysCtrl)
//  return false;
//#undef DO_
//}
//
//void NavCPUToSysCtrl::SerializeWithCachedSizes(
//    ::google::protobuf::io::CodedOutputStream* output) const {
//  // @@protoc_insertion_point(serialize_start:monarcpb.NavCPUToSysCtrl)
//  // optional .monarcpb.NavCPUToSysCtrl.Telemetry telemetry = 1;
//  if (this->has_telemetry()) {
//    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
//      1, *this->telemetry_, output);
//  }
//
//  // optional .monarcpb.NavCPUToSysCtrl.AnalogSensors analog_sensors = 2;
//  if (this->has_analog_sensors()) {
//    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
//      2, *this->analog_sensors_, output);
//  }
//
//  // optional .monarcpb.NavCPUToSysCtrl.NavigationCommand command = 3;
//  if (this->has_command()) {
//    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
//      3, *this->command_, output);
//  }
//
//  // @@protoc_insertion_point(serialize_end:monarcpb.NavCPUToSysCtrl)
//}
//
//::google::protobuf::uint8* NavCPUToSysCtrl::InternalSerializeWithCachedSizesToArray(
//    bool deterministic, ::google::protobuf::uint8* target) const {
//  (void)deterministic; // Unused
//  // @@protoc_insertion_point(serialize_to_array_start:monarcpb.NavCPUToSysCtrl)
//  // optional .monarcpb.NavCPUToSysCtrl.Telemetry telemetry = 1;
//  if (this->has_telemetry()) {
//    target = ::google::protobuf::internal::WireFormatLite::
//      InternalWriteMessageNoVirtualToArray(
//        1, *this->telemetry_, false, target);
//  }
//
//  // optional .monarcpb.NavCPUToSysCtrl.AnalogSensors analog_sensors = 2;
//  if (this->has_analog_sensors()) {
//    target = ::google::protobuf::internal::WireFormatLite::
//      InternalWriteMessageNoVirtualToArray(
//        2, *this->analog_sensors_, false, target);
//  }
//
//  // optional .monarcpb.NavCPUToSysCtrl.NavigationCommand command = 3;
//  if (this->has_command()) {
//    target = ::google::protobuf::internal::WireFormatLite::
//      InternalWriteMessageNoVirtualToArray(
//        3, *this->command_, false, target);
//  }
//
//  // @@protoc_insertion_point(serialize_to_array_end:monarcpb.NavCPUToSysCtrl)
//  return target;
//}
//
//int NavCPUToSysCtrl::ByteSize() const {
//// @@protoc_insertion_point(message_byte_size_start:monarcpb.NavCPUToSysCtrl)
//  int total_size = 0;
//
//  // optional .monarcpb.NavCPUToSysCtrl.Telemetry telemetry = 1;
//  if (this->has_telemetry()) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
//        *this->telemetry_);
//  }
//
//  // optional .monarcpb.NavCPUToSysCtrl.AnalogSensors analog_sensors = 2;
//  if (this->has_analog_sensors()) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
//        *this->analog_sensors_);
//  }
//
//  // optional .monarcpb.NavCPUToSysCtrl.NavigationCommand command = 3;
//  if (this->has_command()) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
//        *this->command_);
//  }
//
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = total_size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//  return total_size;
//}
//
//void NavCPUToSysCtrl::MergeFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_merge_from_start:monarcpb.NavCPUToSysCtrl)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  const NavCPUToSysCtrl* source =
//      ::google::protobuf::internal::DynamicCastToGenerated<const NavCPUToSysCtrl>(
//          &from);
//  if (source == NULL) {
//  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monarcpb.NavCPUToSysCtrl)
//    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
//  } else {
//  // @@protoc_insertion_point(generalized_merge_from_cast_success:monarcpb.NavCPUToSysCtrl)
//    MergeFrom(*source);
//  }
//}
//
//void NavCPUToSysCtrl::MergeFrom(const NavCPUToSysCtrl& from) {
//// @@protoc_insertion_point(class_specific_merge_from_start:monarcpb.NavCPUToSysCtrl)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  if (from.has_telemetry()) {
//    mutable_telemetry()->::monarcpb::NavCPUToSysCtrl_Telemetry::MergeFrom(from.telemetry());
//  }
//  if (from.has_analog_sensors()) {
//    mutable_analog_sensors()->::monarcpb::NavCPUToSysCtrl_AnalogSensors::MergeFrom(from.analog_sensors());
//  }
//  if (from.has_command()) {
//    mutable_command()->::monarcpb::NavCPUToSysCtrl_NavigationCommand::MergeFrom(from.command());
//  }
//}
//
//void NavCPUToSysCtrl::CopyFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_copy_from_start:monarcpb.NavCPUToSysCtrl)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//void NavCPUToSysCtrl::CopyFrom(const NavCPUToSysCtrl& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:monarcpb.NavCPUToSysCtrl)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//bool NavCPUToSysCtrl::IsInitialized() const {
//
//  return true;
//}
//
//void NavCPUToSysCtrl::Swap(NavCPUToSysCtrl* other) {
//  if (other == this) return;
//  InternalSwap(other);
//}
//void NavCPUToSysCtrl::InternalSwap(NavCPUToSysCtrl* other) {
//  std::swap(telemetry_, other->telemetry_);
//  std::swap(analog_sensors_, other->analog_sensors_);
//  std::swap(command_, other->command_);
//  _internal_metadata_.Swap(&other->_internal_metadata_);
//  std::swap(_cached_size_, other->_cached_size_);
//}
//
//::google::protobuf::Metadata NavCPUToSysCtrl::GetMetadata() const {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::Metadata metadata;
//  metadata.descriptor = NavCPUToSysCtrl_descriptor_;
//  metadata.reflection = NavCPUToSysCtrl_reflection_;
//  return metadata;
//}
//
//#if PROTOBUF_INLINE_NOT_IN_HEADERS
//// NavCPUToSysCtrl_Telemetry
//
//// optional .monarcpb.ThreeAxis accelerometer = 1;
//bool NavCPUToSysCtrl_Telemetry::has_accelerometer() const {
//  return !_is_default_instance_ && accelerometer_ != NULL;
//}
//void NavCPUToSysCtrl_Telemetry::clear_accelerometer() {
//  if (GetArenaNoVirtual() == NULL && accelerometer_ != NULL) delete accelerometer_;
//  accelerometer_ = NULL;
//}
//const ::monarcpb::ThreeAxis& NavCPUToSysCtrl_Telemetry::accelerometer() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.accelerometer)
//  return accelerometer_ != NULL ? *accelerometer_ : *default_instance_->accelerometer_;
//}
//::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::mutable_accelerometer() {
//
//  if (accelerometer_ == NULL) {
//    accelerometer_ = new ::monarcpb::ThreeAxis;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.Telemetry.accelerometer)
//  return accelerometer_;
//}
//::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::release_accelerometer() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.Telemetry.accelerometer)
//
//  ::monarcpb::ThreeAxis* temp = accelerometer_;
//  accelerometer_ = NULL;
//  return temp;
//}
//void NavCPUToSysCtrl_Telemetry::set_allocated_accelerometer(::monarcpb::ThreeAxis* accelerometer) {
//  delete accelerometer_;
//  accelerometer_ = accelerometer;
//  if (accelerometer) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.Telemetry.accelerometer)
//}
//
//// optional .monarcpb.ThreeAxis gyroscope = 2;
//bool NavCPUToSysCtrl_Telemetry::has_gyroscope() const {
//  return !_is_default_instance_ && gyroscope_ != NULL;
//}
//void NavCPUToSysCtrl_Telemetry::clear_gyroscope() {
//  if (GetArenaNoVirtual() == NULL && gyroscope_ != NULL) delete gyroscope_;
//  gyroscope_ = NULL;
//}
//const ::monarcpb::ThreeAxis& NavCPUToSysCtrl_Telemetry::gyroscope() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.gyroscope)
//  return gyroscope_ != NULL ? *gyroscope_ : *default_instance_->gyroscope_;
//}
//::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::mutable_gyroscope() {
//
//  if (gyroscope_ == NULL) {
//    gyroscope_ = new ::monarcpb::ThreeAxis;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.Telemetry.gyroscope)
//  return gyroscope_;
//}
//::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::release_gyroscope() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.Telemetry.gyroscope)
//
//  ::monarcpb::ThreeAxis* temp = gyroscope_;
//  gyroscope_ = NULL;
//  return temp;
//}
//void NavCPUToSysCtrl_Telemetry::set_allocated_gyroscope(::monarcpb::ThreeAxis* gyroscope) {
//  delete gyroscope_;
//  gyroscope_ = gyroscope;
//  if (gyroscope) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.Telemetry.gyroscope)
//}
//
//// optional .monarcpb.ThreeAxis magnetometer = 3;
//bool NavCPUToSysCtrl_Telemetry::has_magnetometer() const {
//  return !_is_default_instance_ && magnetometer_ != NULL;
//}
//void NavCPUToSysCtrl_Telemetry::clear_magnetometer() {
//  if (GetArenaNoVirtual() == NULL && magnetometer_ != NULL) delete magnetometer_;
//  magnetometer_ = NULL;
//}
//const ::monarcpb::ThreeAxis& NavCPUToSysCtrl_Telemetry::magnetometer() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.magnetometer)
//  return magnetometer_ != NULL ? *magnetometer_ : *default_instance_->magnetometer_;
//}
//::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::mutable_magnetometer() {
//
//  if (magnetometer_ == NULL) {
//    magnetometer_ = new ::monarcpb::ThreeAxis;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.Telemetry.magnetometer)
//  return magnetometer_;
//}
//::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::release_magnetometer() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.Telemetry.magnetometer)
//
//  ::monarcpb::ThreeAxis* temp = magnetometer_;
//  magnetometer_ = NULL;
//  return temp;
//}
//void NavCPUToSysCtrl_Telemetry::set_allocated_magnetometer(::monarcpb::ThreeAxis* magnetometer) {
//  delete magnetometer_;
//  magnetometer_ = magnetometer;
//  if (magnetometer) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.Telemetry.magnetometer)
//}
//
//// optional int32 atmospheric_pressure = 4;
//void NavCPUToSysCtrl_Telemetry::clear_atmospheric_pressure() {
//  atmospheric_pressure_ = 0;
//}
// ::google::protobuf::int32 NavCPUToSysCtrl_Telemetry::atmospheric_pressure() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.atmospheric_pressure)
//  return atmospheric_pressure_;
//}
// void NavCPUToSysCtrl_Telemetry::set_atmospheric_pressure(::google::protobuf::int32 value) {
//
//  atmospheric_pressure_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.NavCPUToSysCtrl.Telemetry.atmospheric_pressure)
//}
//
//// optional int32 altitude = 5;
//void NavCPUToSysCtrl_Telemetry::clear_altitude() {
//  altitude_ = 0;
//}
// ::google::protobuf::int32 NavCPUToSysCtrl_Telemetry::altitude() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.altitude)
//  return altitude_;
//}
// void NavCPUToSysCtrl_Telemetry::set_altitude(::google::protobuf::int32 value) {
//
//  altitude_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.NavCPUToSysCtrl.Telemetry.altitude)
//}
//
//// -------------------------------------------------------------------
//
//// NavCPUToSysCtrl_AnalogSensors
//
//// optional int32 current = 1;
//void NavCPUToSysCtrl_AnalogSensors::clear_current() {
//  current_ = 0;
//}
// ::google::protobuf::int32 NavCPUToSysCtrl_AnalogSensors::current() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.AnalogSensors.current)
//  return current_;
//}
// void NavCPUToSysCtrl_AnalogSensors::set_current(::google::protobuf::int32 value) {
//
//  current_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.NavCPUToSysCtrl.AnalogSensors.current)
//}
//
//// optional int32 voltage = 2;
//void NavCPUToSysCtrl_AnalogSensors::clear_voltage() {
//  voltage_ = 0;
//}
// ::google::protobuf::int32 NavCPUToSysCtrl_AnalogSensors::voltage() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.AnalogSensors.voltage)
//  return voltage_;
//}
// void NavCPUToSysCtrl_AnalogSensors::set_voltage(::google::protobuf::int32 value) {
//
//  voltage_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.NavCPUToSysCtrl.AnalogSensors.voltage)
//}
//
//// -------------------------------------------------------------------
//
//// NavCPUToSysCtrl_NavigationCommand
//
//// -------------------------------------------------------------------
//
//// NavCPUToSysCtrl
//
//// optional .monarcpb.NavCPUToSysCtrl.Telemetry telemetry = 1;
//bool NavCPUToSysCtrl::has_telemetry() const {
//  return !_is_default_instance_ && telemetry_ != NULL;
//}
//void NavCPUToSysCtrl::clear_telemetry() {
//  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
//  telemetry_ = NULL;
//}
//const ::monarcpb::NavCPUToSysCtrl_Telemetry& NavCPUToSysCtrl::telemetry() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.telemetry)
//  return telemetry_ != NULL ? *telemetry_ : *default_instance_->telemetry_;
//}
//::monarcpb::NavCPUToSysCtrl_Telemetry* NavCPUToSysCtrl::mutable_telemetry() {
//
//  if (telemetry_ == NULL) {
//    telemetry_ = new ::monarcpb::NavCPUToSysCtrl_Telemetry;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.telemetry)
//  return telemetry_;
//}
//::monarcpb::NavCPUToSysCtrl_Telemetry* NavCPUToSysCtrl::release_telemetry() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.telemetry)
//
//  ::monarcpb::NavCPUToSysCtrl_Telemetry* temp = telemetry_;
//  telemetry_ = NULL;
//  return temp;
//}
//void NavCPUToSysCtrl::set_allocated_telemetry(::monarcpb::NavCPUToSysCtrl_Telemetry* telemetry) {
//  delete telemetry_;
//  telemetry_ = telemetry;
//  if (telemetry) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.telemetry)
//}
//
//// optional .monarcpb.NavCPUToSysCtrl.AnalogSensors analog_sensors = 2;
//bool NavCPUToSysCtrl::has_analog_sensors() const {
//  return !_is_default_instance_ && analog_sensors_ != NULL;
//}
//void NavCPUToSysCtrl::clear_analog_sensors() {
//  if (GetArenaNoVirtual() == NULL && analog_sensors_ != NULL) delete analog_sensors_;
//  analog_sensors_ = NULL;
//}
//const ::monarcpb::NavCPUToSysCtrl_AnalogSensors& NavCPUToSysCtrl::analog_sensors() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.analog_sensors)
//  return analog_sensors_ != NULL ? *analog_sensors_ : *default_instance_->analog_sensors_;
//}
//::monarcpb::NavCPUToSysCtrl_AnalogSensors* NavCPUToSysCtrl::mutable_analog_sensors() {
//
//  if (analog_sensors_ == NULL) {
//    analog_sensors_ = new ::monarcpb::NavCPUToSysCtrl_AnalogSensors;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.analog_sensors)
//  return analog_sensors_;
//}
//::monarcpb::NavCPUToSysCtrl_AnalogSensors* NavCPUToSysCtrl::release_analog_sensors() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.analog_sensors)
//
//  ::monarcpb::NavCPUToSysCtrl_AnalogSensors* temp = analog_sensors_;
//  analog_sensors_ = NULL;
//  return temp;
//}
//void NavCPUToSysCtrl::set_allocated_analog_sensors(::monarcpb::NavCPUToSysCtrl_AnalogSensors* analog_sensors) {
//  delete analog_sensors_;
//  analog_sensors_ = analog_sensors;
//  if (analog_sensors) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.analog_sensors)
//}
//
//// optional .monarcpb.NavCPUToSysCtrl.NavigationCommand command = 3;
//bool NavCPUToSysCtrl::has_command() const {
//  return !_is_default_instance_ && command_ != NULL;
//}
//void NavCPUToSysCtrl::clear_command() {
//  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
//  command_ = NULL;
//}
//const ::monarcpb::NavCPUToSysCtrl_NavigationCommand& NavCPUToSysCtrl::command() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.command)
//  return command_ != NULL ? *command_ : *default_instance_->command_;
//}
//::monarcpb::NavCPUToSysCtrl_NavigationCommand* NavCPUToSysCtrl::mutable_command() {
//
//  if (command_ == NULL) {
//    command_ = new ::monarcpb::NavCPUToSysCtrl_NavigationCommand;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.command)
//  return command_;
//}
//::monarcpb::NavCPUToSysCtrl_NavigationCommand* NavCPUToSysCtrl::release_command() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.command)
//
//  ::monarcpb::NavCPUToSysCtrl_NavigationCommand* temp = command_;
//  command_ = NULL;
//  return temp;
//}
//void NavCPUToSysCtrl::set_allocated_command(::monarcpb::NavCPUToSysCtrl_NavigationCommand* command) {
//  delete command_;
//  command_ = command;
//  if (command) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.command)
//}
//
//#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
//
//// ===================================================================
//
//#if !defined(_MSC_VER) || _MSC_VER >= 1900
//const int SysCtrlToNavCPU_Telemetry::kGPSFieldNumber;
//#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
//
//SysCtrlToNavCPU_Telemetry::SysCtrlToNavCPU_Telemetry()
//  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
//  SharedCtor();
//  // @@protoc_insertion_point(constructor:monarcpb.SysCtrlToNavCPU.Telemetry)
//}
//
//void SysCtrlToNavCPU_Telemetry::InitAsDefaultInstance() {
//  _is_default_instance_ = true;
//}
//
//SysCtrlToNavCPU_Telemetry::SysCtrlToNavCPU_Telemetry(const SysCtrlToNavCPU_Telemetry& from)
//  : ::google::protobuf::Message(),
//    _internal_metadata_(NULL) {
//  SharedCtor();
//  MergeFrom(from);
//  // @@protoc_insertion_point(copy_constructor:monarcpb.SysCtrlToNavCPU.Telemetry)
//}
//
//void SysCtrlToNavCPU_Telemetry::SharedCtor() {
//    _is_default_instance_ = false;
//  _cached_size_ = 0;
//  gps_ = 0;
//}
//
//SysCtrlToNavCPU_Telemetry::~SysCtrlToNavCPU_Telemetry() {
//  // @@protoc_insertion_point(destructor:monarcpb.SysCtrlToNavCPU.Telemetry)
//  SharedDtor();
//}
//
//void SysCtrlToNavCPU_Telemetry::SharedDtor() {
//  if (this != default_instance_) {
//  }
//}
//
//void SysCtrlToNavCPU_Telemetry::SetCachedSize(int size) const {
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//}
//const ::google::protobuf::Descriptor* SysCtrlToNavCPU_Telemetry::descriptor() {
//  protobuf_AssignDescriptorsOnce();
//  return SysCtrlToNavCPU_Telemetry_descriptor_;
//}
//
//const SysCtrlToNavCPU_Telemetry& SysCtrlToNavCPU_Telemetry::default_instance() {
//  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
//  return *default_instance_;
//}
//
//SysCtrlToNavCPU_Telemetry* SysCtrlToNavCPU_Telemetry::default_instance_ = NULL;
//
//SysCtrlToNavCPU_Telemetry* SysCtrlToNavCPU_Telemetry::New(::google::protobuf::Arena* arena) const {
//  SysCtrlToNavCPU_Telemetry* n = new SysCtrlToNavCPU_Telemetry;
//  if (arena != NULL) {
//    arena->Own(n);
//  }
//  return n;
//}
//
//void SysCtrlToNavCPU_Telemetry::Clear() {
//// @@protoc_insertion_point(message_clear_start:monarcpb.SysCtrlToNavCPU.Telemetry)
//  gps_ = 0;
//}
//
//bool SysCtrlToNavCPU_Telemetry::MergePartialFromCodedStream(
//    ::google::protobuf::io::CodedInputStream* input) {
//#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
//  ::google::protobuf::uint32 tag;
//  // @@protoc_insertion_point(parse_start:monarcpb.SysCtrlToNavCPU.Telemetry)
//  for (;;) {
//    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
//    tag = p.first;
//    if (!p.second) goto handle_unusual;
//    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
//      // optional int32 GPS = 1;
//      case 1: {
//        if (tag == 8) {
//          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
//                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
//                 input, &gps_)));
//
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectAtEnd()) goto success;
//        break;
//      }
//
//      default: {
//      handle_unusual:
//        if (tag == 0 ||
//            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
//            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
//          goto success;
//        }
//        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
//        break;
//      }
//    }
//  }
//success:
//  // @@protoc_insertion_point(parse_success:monarcpb.SysCtrlToNavCPU.Telemetry)
//  return true;
//failure:
//  // @@protoc_insertion_point(parse_failure:monarcpb.SysCtrlToNavCPU.Telemetry)
//  return false;
//#undef DO_
//}
//
//void SysCtrlToNavCPU_Telemetry::SerializeWithCachedSizes(
//    ::google::protobuf::io::CodedOutputStream* output) const {
//  // @@protoc_insertion_point(serialize_start:monarcpb.SysCtrlToNavCPU.Telemetry)
//  // optional int32 GPS = 1;
//  if (this->gps() != 0) {
//    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gps(), output);
//  }
//
//  // @@protoc_insertion_point(serialize_end:monarcpb.SysCtrlToNavCPU.Telemetry)
//}
//
//::google::protobuf::uint8* SysCtrlToNavCPU_Telemetry::InternalSerializeWithCachedSizesToArray(
//    bool deterministic, ::google::protobuf::uint8* target) const {
//  (void)deterministic; // Unused
//  // @@protoc_insertion_point(serialize_to_array_start:monarcpb.SysCtrlToNavCPU.Telemetry)
//  // optional int32 GPS = 1;
//  if (this->gps() != 0) {
//    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gps(), target);
//  }
//
//  // @@protoc_insertion_point(serialize_to_array_end:monarcpb.SysCtrlToNavCPU.Telemetry)
//  return target;
//}
//
//int SysCtrlToNavCPU_Telemetry::ByteSize() const {
//// @@protoc_insertion_point(message_byte_size_start:monarcpb.SysCtrlToNavCPU.Telemetry)
//  int total_size = 0;
//
//  // optional int32 GPS = 1;
//  if (this->gps() != 0) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::Int32Size(
//        this->gps());
//  }
//
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = total_size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//  return total_size;
//}
//
//void SysCtrlToNavCPU_Telemetry::MergeFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_merge_from_start:monarcpb.SysCtrlToNavCPU.Telemetry)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  const SysCtrlToNavCPU_Telemetry* source =
//      ::google::protobuf::internal::DynamicCastToGenerated<const SysCtrlToNavCPU_Telemetry>(
//          &from);
//  if (source == NULL) {
//  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monarcpb.SysCtrlToNavCPU.Telemetry)
//    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
//  } else {
//  // @@protoc_insertion_point(generalized_merge_from_cast_success:monarcpb.SysCtrlToNavCPU.Telemetry)
//    MergeFrom(*source);
//  }
//}
//
//void SysCtrlToNavCPU_Telemetry::MergeFrom(const SysCtrlToNavCPU_Telemetry& from) {
//// @@protoc_insertion_point(class_specific_merge_from_start:monarcpb.SysCtrlToNavCPU.Telemetry)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  if (from.gps() != 0) {
//    set_gps(from.gps());
//  }
//}
//
//void SysCtrlToNavCPU_Telemetry::CopyFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_copy_from_start:monarcpb.SysCtrlToNavCPU.Telemetry)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//void SysCtrlToNavCPU_Telemetry::CopyFrom(const SysCtrlToNavCPU_Telemetry& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:monarcpb.SysCtrlToNavCPU.Telemetry)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//bool SysCtrlToNavCPU_Telemetry::IsInitialized() const {
//
//  return true;
//}
//
//void SysCtrlToNavCPU_Telemetry::Swap(SysCtrlToNavCPU_Telemetry* other) {
//  if (other == this) return;
//  InternalSwap(other);
//}
//void SysCtrlToNavCPU_Telemetry::InternalSwap(SysCtrlToNavCPU_Telemetry* other) {
//  std::swap(gps_, other->gps_);
//  _internal_metadata_.Swap(&other->_internal_metadata_);
//  std::swap(_cached_size_, other->_cached_size_);
//}
//
//::google::protobuf::Metadata SysCtrlToNavCPU_Telemetry::GetMetadata() const {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::Metadata metadata;
//  metadata.descriptor = SysCtrlToNavCPU_Telemetry_descriptor_;
//  metadata.reflection = SysCtrlToNavCPU_Telemetry_reflection_;
//  return metadata;
//}
//
//
//// -------------------------------------------------------------------
//
//#if !defined(_MSC_VER) || _MSC_VER >= 1900
//#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
//
//SysCtrlToNavCPU_ComputerState::SysCtrlToNavCPU_ComputerState()
//  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
//  SharedCtor();
//  // @@protoc_insertion_point(constructor:monarcpb.SysCtrlToNavCPU.ComputerState)
//}
//
//void SysCtrlToNavCPU_ComputerState::InitAsDefaultInstance() {
//  _is_default_instance_ = true;
//}
//
//SysCtrlToNavCPU_ComputerState::SysCtrlToNavCPU_ComputerState(const SysCtrlToNavCPU_ComputerState& from)
//  : ::google::protobuf::Message(),
//    _internal_metadata_(NULL) {
//  SharedCtor();
//  MergeFrom(from);
//  // @@protoc_insertion_point(copy_constructor:monarcpb.SysCtrlToNavCPU.ComputerState)
//}
//
//void SysCtrlToNavCPU_ComputerState::SharedCtor() {
//    _is_default_instance_ = false;
//  _cached_size_ = 0;
//}
//
//SysCtrlToNavCPU_ComputerState::~SysCtrlToNavCPU_ComputerState() {
//  // @@protoc_insertion_point(destructor:monarcpb.SysCtrlToNavCPU.ComputerState)
//  SharedDtor();
//}
//
//void SysCtrlToNavCPU_ComputerState::SharedDtor() {
//  if (this != default_instance_) {
//  }
//}
//
//void SysCtrlToNavCPU_ComputerState::SetCachedSize(int size) const {
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//}
//const ::google::protobuf::Descriptor* SysCtrlToNavCPU_ComputerState::descriptor() {
//  protobuf_AssignDescriptorsOnce();
//  return SysCtrlToNavCPU_ComputerState_descriptor_;
//}
//
//const SysCtrlToNavCPU_ComputerState& SysCtrlToNavCPU_ComputerState::default_instance() {
//  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
//  return *default_instance_;
//}
//
//SysCtrlToNavCPU_ComputerState* SysCtrlToNavCPU_ComputerState::default_instance_ = NULL;
//
//SysCtrlToNavCPU_ComputerState* SysCtrlToNavCPU_ComputerState::New(::google::protobuf::Arena* arena) const {
//  SysCtrlToNavCPU_ComputerState* n = new SysCtrlToNavCPU_ComputerState;
//  if (arena != NULL) {
//    arena->Own(n);
//  }
//  return n;
//}
//
//void SysCtrlToNavCPU_ComputerState::Clear() {
//// @@protoc_insertion_point(message_clear_start:monarcpb.SysCtrlToNavCPU.ComputerState)
//}
//
//bool SysCtrlToNavCPU_ComputerState::MergePartialFromCodedStream(
//    ::google::protobuf::io::CodedInputStream* input) {
//#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
//  ::google::protobuf::uint32 tag;
//  // @@protoc_insertion_point(parse_start:monarcpb.SysCtrlToNavCPU.ComputerState)
//  for (;;) {
//    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
//    tag = p.first;
//    if (!p.second) goto handle_unusual;
//  handle_unusual:
//    if (tag == 0 ||
//        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
//        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
//      goto success;
//    }
//    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
//  }
//success:
//  // @@protoc_insertion_point(parse_success:monarcpb.SysCtrlToNavCPU.ComputerState)
//  return true;
//failure:
//  // @@protoc_insertion_point(parse_failure:monarcpb.SysCtrlToNavCPU.ComputerState)
//  return false;
//#undef DO_
//}
//
//void SysCtrlToNavCPU_ComputerState::SerializeWithCachedSizes(
//    ::google::protobuf::io::CodedOutputStream* output) const {
//  // @@protoc_insertion_point(serialize_start:monarcpb.SysCtrlToNavCPU.ComputerState)
//  // @@protoc_insertion_point(serialize_end:monarcpb.SysCtrlToNavCPU.ComputerState)
//}
//
//::google::protobuf::uint8* SysCtrlToNavCPU_ComputerState::InternalSerializeWithCachedSizesToArray(
//    bool deterministic, ::google::protobuf::uint8* target) const {
//  (void)deterministic; // Unused
//  // @@protoc_insertion_point(serialize_to_array_start:monarcpb.SysCtrlToNavCPU.ComputerState)
//  // @@protoc_insertion_point(serialize_to_array_end:monarcpb.SysCtrlToNavCPU.ComputerState)
//  return target;
//}
//
//int SysCtrlToNavCPU_ComputerState::ByteSize() const {
//// @@protoc_insertion_point(message_byte_size_start:monarcpb.SysCtrlToNavCPU.ComputerState)
//  int total_size = 0;
//
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = total_size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//  return total_size;
//}
//
//void SysCtrlToNavCPU_ComputerState::MergeFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_merge_from_start:monarcpb.SysCtrlToNavCPU.ComputerState)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  const SysCtrlToNavCPU_ComputerState* source =
//      ::google::protobuf::internal::DynamicCastToGenerated<const SysCtrlToNavCPU_ComputerState>(
//          &from);
//  if (source == NULL) {
//  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monarcpb.SysCtrlToNavCPU.ComputerState)
//    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
//  } else {
//  // @@protoc_insertion_point(generalized_merge_from_cast_success:monarcpb.SysCtrlToNavCPU.ComputerState)
//    MergeFrom(*source);
//  }
//}
//
//void SysCtrlToNavCPU_ComputerState::MergeFrom(const SysCtrlToNavCPU_ComputerState& from) {
//// @@protoc_insertion_point(class_specific_merge_from_start:monarcpb.SysCtrlToNavCPU.ComputerState)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//}
//
//void SysCtrlToNavCPU_ComputerState::CopyFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_copy_from_start:monarcpb.SysCtrlToNavCPU.ComputerState)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//void SysCtrlToNavCPU_ComputerState::CopyFrom(const SysCtrlToNavCPU_ComputerState& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:monarcpb.SysCtrlToNavCPU.ComputerState)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//bool SysCtrlToNavCPU_ComputerState::IsInitialized() const {
//
//  return true;
//}
//
//void SysCtrlToNavCPU_ComputerState::Swap(SysCtrlToNavCPU_ComputerState* other) {
//  if (other == this) return;
//  InternalSwap(other);
//}
//void SysCtrlToNavCPU_ComputerState::InternalSwap(SysCtrlToNavCPU_ComputerState* other) {
//  _internal_metadata_.Swap(&other->_internal_metadata_);
//  std::swap(_cached_size_, other->_cached_size_);
//}
//
//::google::protobuf::Metadata SysCtrlToNavCPU_ComputerState::GetMetadata() const {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::Metadata metadata;
//  metadata.descriptor = SysCtrlToNavCPU_ComputerState_descriptor_;
//  metadata.reflection = SysCtrlToNavCPU_ComputerState_reflection_;
//  return metadata;
//}
//
//
//// -------------------------------------------------------------------
//
//#if !defined(_MSC_VER) || _MSC_VER >= 1900
//#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
//
//SysCtrlToNavCPU_FlightControl::SysCtrlToNavCPU_FlightControl()
//  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
//  SharedCtor();
//  // @@protoc_insertion_point(constructor:monarcpb.SysCtrlToNavCPU.FlightControl)
//}
//
//void SysCtrlToNavCPU_FlightControl::InitAsDefaultInstance() {
//  _is_default_instance_ = true;
//}
//
//SysCtrlToNavCPU_FlightControl::SysCtrlToNavCPU_FlightControl(const SysCtrlToNavCPU_FlightControl& from)
//  : ::google::protobuf::Message(),
//    _internal_metadata_(NULL) {
//  SharedCtor();
//  MergeFrom(from);
//  // @@protoc_insertion_point(copy_constructor:monarcpb.SysCtrlToNavCPU.FlightControl)
//}
//
//void SysCtrlToNavCPU_FlightControl::SharedCtor() {
//    _is_default_instance_ = false;
//  _cached_size_ = 0;
//}
//
//SysCtrlToNavCPU_FlightControl::~SysCtrlToNavCPU_FlightControl() {
//  // @@protoc_insertion_point(destructor:monarcpb.SysCtrlToNavCPU.FlightControl)
//  SharedDtor();
//}
//
//void SysCtrlToNavCPU_FlightControl::SharedDtor() {
//  if (this != default_instance_) {
//  }
//}
//
//void SysCtrlToNavCPU_FlightControl::SetCachedSize(int size) const {
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//}
//const ::google::protobuf::Descriptor* SysCtrlToNavCPU_FlightControl::descriptor() {
//  protobuf_AssignDescriptorsOnce();
//  return SysCtrlToNavCPU_FlightControl_descriptor_;
//}
//
//const SysCtrlToNavCPU_FlightControl& SysCtrlToNavCPU_FlightControl::default_instance() {
//  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
//  return *default_instance_;
//}
//
//SysCtrlToNavCPU_FlightControl* SysCtrlToNavCPU_FlightControl::default_instance_ = NULL;
//
//SysCtrlToNavCPU_FlightControl* SysCtrlToNavCPU_FlightControl::New(::google::protobuf::Arena* arena) const {
//  SysCtrlToNavCPU_FlightControl* n = new SysCtrlToNavCPU_FlightControl;
//  if (arena != NULL) {
//    arena->Own(n);
//  }
//  return n;
//}
//
//void SysCtrlToNavCPU_FlightControl::Clear() {
//// @@protoc_insertion_point(message_clear_start:monarcpb.SysCtrlToNavCPU.FlightControl)
//}
//
//bool SysCtrlToNavCPU_FlightControl::MergePartialFromCodedStream(
//    ::google::protobuf::io::CodedInputStream* input) {
//#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
//  ::google::protobuf::uint32 tag;
//  // @@protoc_insertion_point(parse_start:monarcpb.SysCtrlToNavCPU.FlightControl)
//  for (;;) {
//    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
//    tag = p.first;
//    if (!p.second) goto handle_unusual;
//  handle_unusual:
//    if (tag == 0 ||
//        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
//        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
//      goto success;
//    }
//    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
//  }
//success:
//  // @@protoc_insertion_point(parse_success:monarcpb.SysCtrlToNavCPU.FlightControl)
//  return true;
//failure:
//  // @@protoc_insertion_point(parse_failure:monarcpb.SysCtrlToNavCPU.FlightControl)
//  return false;
//#undef DO_
//}
//
//void SysCtrlToNavCPU_FlightControl::SerializeWithCachedSizes(
//    ::google::protobuf::io::CodedOutputStream* output) const {
//  // @@protoc_insertion_point(serialize_start:monarcpb.SysCtrlToNavCPU.FlightControl)
//  // @@protoc_insertion_point(serialize_end:monarcpb.SysCtrlToNavCPU.FlightControl)
//}
//
//::google::protobuf::uint8* SysCtrlToNavCPU_FlightControl::InternalSerializeWithCachedSizesToArray(
//    bool deterministic, ::google::protobuf::uint8* target) const {
//  (void)deterministic; // Unused
//  // @@protoc_insertion_point(serialize_to_array_start:monarcpb.SysCtrlToNavCPU.FlightControl)
//  // @@protoc_insertion_point(serialize_to_array_end:monarcpb.SysCtrlToNavCPU.FlightControl)
//  return target;
//}
//
//int SysCtrlToNavCPU_FlightControl::ByteSize() const {
//// @@protoc_insertion_point(message_byte_size_start:monarcpb.SysCtrlToNavCPU.FlightControl)
//  int total_size = 0;
//
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = total_size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//  return total_size;
//}
//
//void SysCtrlToNavCPU_FlightControl::MergeFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_merge_from_start:monarcpb.SysCtrlToNavCPU.FlightControl)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  const SysCtrlToNavCPU_FlightControl* source =
//      ::google::protobuf::internal::DynamicCastToGenerated<const SysCtrlToNavCPU_FlightControl>(
//          &from);
//  if (source == NULL) {
//  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monarcpb.SysCtrlToNavCPU.FlightControl)
//    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
//  } else {
//  // @@protoc_insertion_point(generalized_merge_from_cast_success:monarcpb.SysCtrlToNavCPU.FlightControl)
//    MergeFrom(*source);
//  }
//}
//
//void SysCtrlToNavCPU_FlightControl::MergeFrom(const SysCtrlToNavCPU_FlightControl& from) {
//// @@protoc_insertion_point(class_specific_merge_from_start:monarcpb.SysCtrlToNavCPU.FlightControl)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//}
//
//void SysCtrlToNavCPU_FlightControl::CopyFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_copy_from_start:monarcpb.SysCtrlToNavCPU.FlightControl)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//void SysCtrlToNavCPU_FlightControl::CopyFrom(const SysCtrlToNavCPU_FlightControl& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:monarcpb.SysCtrlToNavCPU.FlightControl)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//bool SysCtrlToNavCPU_FlightControl::IsInitialized() const {
//
//  return true;
//}
//
//void SysCtrlToNavCPU_FlightControl::Swap(SysCtrlToNavCPU_FlightControl* other) {
//  if (other == this) return;
//  InternalSwap(other);
//}
//void SysCtrlToNavCPU_FlightControl::InternalSwap(SysCtrlToNavCPU_FlightControl* other) {
//  _internal_metadata_.Swap(&other->_internal_metadata_);
//  std::swap(_cached_size_, other->_cached_size_);
//}
//
//::google::protobuf::Metadata SysCtrlToNavCPU_FlightControl::GetMetadata() const {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::Metadata metadata;
//  metadata.descriptor = SysCtrlToNavCPU_FlightControl_descriptor_;
//  metadata.reflection = SysCtrlToNavCPU_FlightControl_reflection_;
//  return metadata;
//}
//
//
//// -------------------------------------------------------------------
//
//#if !defined(_MSC_VER) || _MSC_VER >= 1900
//const int SysCtrlToNavCPU::kTelemetryFieldNumber;
//const int SysCtrlToNavCPU::kStateFieldNumber;
//const int SysCtrlToNavCPU::kControlFieldNumber;
//#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
//
//SysCtrlToNavCPU::SysCtrlToNavCPU()
//  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
//  SharedCtor();
//  // @@protoc_insertion_point(constructor:monarcpb.SysCtrlToNavCPU)
//}
//
//void SysCtrlToNavCPU::InitAsDefaultInstance() {
//  _is_default_instance_ = true;
//  telemetry_ = const_cast< ::monarcpb::SysCtrlToNavCPU_Telemetry*>(&::monarcpb::SysCtrlToNavCPU_Telemetry::default_instance());
//  state_ = const_cast< ::monarcpb::SysCtrlToNavCPU_ComputerState*>(&::monarcpb::SysCtrlToNavCPU_ComputerState::default_instance());
//  control_ = const_cast< ::monarcpb::SysCtrlToNavCPU_FlightControl*>(&::monarcpb::SysCtrlToNavCPU_FlightControl::default_instance());
//}
//
//SysCtrlToNavCPU::SysCtrlToNavCPU(const SysCtrlToNavCPU& from)
//  : ::google::protobuf::Message(),
//    _internal_metadata_(NULL) {
//  SharedCtor();
//  MergeFrom(from);
//  // @@protoc_insertion_point(copy_constructor:monarcpb.SysCtrlToNavCPU)
//}
//
//void SysCtrlToNavCPU::SharedCtor() {
//    _is_default_instance_ = false;
//  _cached_size_ = 0;
//  telemetry_ = NULL;
//  state_ = NULL;
//  control_ = NULL;
//}
//
//SysCtrlToNavCPU::~SysCtrlToNavCPU() {
//  // @@protoc_insertion_point(destructor:monarcpb.SysCtrlToNavCPU)
//  SharedDtor();
//}
//
//void SysCtrlToNavCPU::SharedDtor() {
//  if (this != default_instance_) {
//    delete telemetry_;
//    delete state_;
//    delete control_;
//  }
//}
//
//void SysCtrlToNavCPU::SetCachedSize(int size) const {
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//}
//const ::google::protobuf::Descriptor* SysCtrlToNavCPU::descriptor() {
//  protobuf_AssignDescriptorsOnce();
//  return SysCtrlToNavCPU_descriptor_;
//}
//
//const SysCtrlToNavCPU& SysCtrlToNavCPU::default_instance() {
//  if (default_instance_ == NULL) protobuf_AddDesc_api_2eproto();
//  return *default_instance_;
//}
//
//SysCtrlToNavCPU* SysCtrlToNavCPU::default_instance_ = NULL;
//
//SysCtrlToNavCPU* SysCtrlToNavCPU::New(::google::protobuf::Arena* arena) const {
//  SysCtrlToNavCPU* n = new SysCtrlToNavCPU;
//  if (arena != NULL) {
//    arena->Own(n);
//  }
//  return n;
//}
//
//void SysCtrlToNavCPU::Clear() {
//// @@protoc_insertion_point(message_clear_start:monarcpb.SysCtrlToNavCPU)
//  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
//  telemetry_ = NULL;
//  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
//  state_ = NULL;
//  if (GetArenaNoVirtual() == NULL && control_ != NULL) delete control_;
//  control_ = NULL;
//}
//
//bool SysCtrlToNavCPU::MergePartialFromCodedStream(
//    ::google::protobuf::io::CodedInputStream* input) {
//#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
//  ::google::protobuf::uint32 tag;
//  // @@protoc_insertion_point(parse_start:monarcpb.SysCtrlToNavCPU)
//  for (;;) {
//    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
//    tag = p.first;
//    if (!p.second) goto handle_unusual;
//    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
//      // optional .monarcpb.SysCtrlToNavCPU.Telemetry telemetry = 1;
//      case 1: {
//        if (tag == 10) {
//          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
//               input, mutable_telemetry()));
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(18)) goto parse_state;
//        break;
//      }
//
//      // optional .monarcpb.SysCtrlToNavCPU.ComputerState state = 2;
//      case 2: {
//        if (tag == 18) {
//         parse_state:
//          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
//               input, mutable_state()));
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectTag(26)) goto parse_control;
//        break;
//      }
//
//      // optional .monarcpb.SysCtrlToNavCPU.FlightControl control = 3;
//      case 3: {
//        if (tag == 26) {
//         parse_control:
//          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
//               input, mutable_control()));
//        } else {
//          goto handle_unusual;
//        }
//        if (input->ExpectAtEnd()) goto success;
//        break;
//      }
//
//      default: {
//      handle_unusual:
//        if (tag == 0 ||
//            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
//            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
//          goto success;
//        }
//        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
//        break;
//      }
//    }
//  }
//success:
//  // @@protoc_insertion_point(parse_success:monarcpb.SysCtrlToNavCPU)
//  return true;
//failure:
//  // @@protoc_insertion_point(parse_failure:monarcpb.SysCtrlToNavCPU)
//  return false;
//#undef DO_
//}
//
//void SysCtrlToNavCPU::SerializeWithCachedSizes(
//    ::google::protobuf::io::CodedOutputStream* output) const {
//  // @@protoc_insertion_point(serialize_start:monarcpb.SysCtrlToNavCPU)
//  // optional .monarcpb.SysCtrlToNavCPU.Telemetry telemetry = 1;
//  if (this->has_telemetry()) {
//    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
//      1, *this->telemetry_, output);
//  }
//
//  // optional .monarcpb.SysCtrlToNavCPU.ComputerState state = 2;
//  if (this->has_state()) {
//    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
//      2, *this->state_, output);
//  }
//
//  // optional .monarcpb.SysCtrlToNavCPU.FlightControl control = 3;
//  if (this->has_control()) {
//    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
//      3, *this->control_, output);
//  }
//
//  // @@protoc_insertion_point(serialize_end:monarcpb.SysCtrlToNavCPU)
//}
//
//::google::protobuf::uint8* SysCtrlToNavCPU::InternalSerializeWithCachedSizesToArray(
//    bool deterministic, ::google::protobuf::uint8* target) const {
//  (void)deterministic; // Unused
//  // @@protoc_insertion_point(serialize_to_array_start:monarcpb.SysCtrlToNavCPU)
//  // optional .monarcpb.SysCtrlToNavCPU.Telemetry telemetry = 1;
//  if (this->has_telemetry()) {
//    target = ::google::protobuf::internal::WireFormatLite::
//      InternalWriteMessageNoVirtualToArray(
//        1, *this->telemetry_, false, target);
//  }
//
//  // optional .monarcpb.SysCtrlToNavCPU.ComputerState state = 2;
//  if (this->has_state()) {
//    target = ::google::protobuf::internal::WireFormatLite::
//      InternalWriteMessageNoVirtualToArray(
//        2, *this->state_, false, target);
//  }
//
//  // optional .monarcpb.SysCtrlToNavCPU.FlightControl control = 3;
//  if (this->has_control()) {
//    target = ::google::protobuf::internal::WireFormatLite::
//      InternalWriteMessageNoVirtualToArray(
//        3, *this->control_, false, target);
//  }
//
//  // @@protoc_insertion_point(serialize_to_array_end:monarcpb.SysCtrlToNavCPU)
//  return target;
//}
//
//int SysCtrlToNavCPU::ByteSize() const {
//// @@protoc_insertion_point(message_byte_size_start:monarcpb.SysCtrlToNavCPU)
//  int total_size = 0;
//
//  // optional .monarcpb.SysCtrlToNavCPU.Telemetry telemetry = 1;
//  if (this->has_telemetry()) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
//        *this->telemetry_);
//  }
//
//  // optional .monarcpb.SysCtrlToNavCPU.ComputerState state = 2;
//  if (this->has_state()) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
//        *this->state_);
//  }
//
//  // optional .monarcpb.SysCtrlToNavCPU.FlightControl control = 3;
//  if (this->has_control()) {
//    total_size += 1 +
//      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
//        *this->control_);
//  }
//
//  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
//  _cached_size_ = total_size;
//  GOOGLE_SAFE_CONCURRENT_WRITES_END();
//  return total_size;
//}
//
//void SysCtrlToNavCPU::MergeFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_merge_from_start:monarcpb.SysCtrlToNavCPU)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  const SysCtrlToNavCPU* source =
//      ::google::protobuf::internal::DynamicCastToGenerated<const SysCtrlToNavCPU>(
//          &from);
//  if (source == NULL) {
//  // @@protoc_insertion_point(generalized_merge_from_cast_fail:monarcpb.SysCtrlToNavCPU)
//    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
//  } else {
//  // @@protoc_insertion_point(generalized_merge_from_cast_success:monarcpb.SysCtrlToNavCPU)
//    MergeFrom(*source);
//  }
//}
//
//void SysCtrlToNavCPU::MergeFrom(const SysCtrlToNavCPU& from) {
//// @@protoc_insertion_point(class_specific_merge_from_start:monarcpb.SysCtrlToNavCPU)
//  if (GOOGLE_PREDICT_FALSE(&from == this)) {
//    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
//  }
//  if (from.has_telemetry()) {
//    mutable_telemetry()->::monarcpb::SysCtrlToNavCPU_Telemetry::MergeFrom(from.telemetry());
//  }
//  if (from.has_state()) {
//    mutable_state()->::monarcpb::SysCtrlToNavCPU_ComputerState::MergeFrom(from.state());
//  }
//  if (from.has_control()) {
//    mutable_control()->::monarcpb::SysCtrlToNavCPU_FlightControl::MergeFrom(from.control());
//  }
//}
//
//void SysCtrlToNavCPU::CopyFrom(const ::google::protobuf::Message& from) {
//// @@protoc_insertion_point(generalized_copy_from_start:monarcpb.SysCtrlToNavCPU)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//void SysCtrlToNavCPU::CopyFrom(const SysCtrlToNavCPU& from) {
//// @@protoc_insertion_point(class_specific_copy_from_start:monarcpb.SysCtrlToNavCPU)
//  if (&from == this) return;
//  Clear();
//  MergeFrom(from);
//}
//
//bool SysCtrlToNavCPU::IsInitialized() const {
//
//  return true;
//}
//
//void SysCtrlToNavCPU::Swap(SysCtrlToNavCPU* other) {
//  if (other == this) return;
//  InternalSwap(other);
//}
//void SysCtrlToNavCPU::InternalSwap(SysCtrlToNavCPU* other) {
//  std::swap(telemetry_, other->telemetry_);
//  std::swap(state_, other->state_);
//  std::swap(control_, other->control_);
//  _internal_metadata_.Swap(&other->_internal_metadata_);
//  std::swap(_cached_size_, other->_cached_size_);
//}
//
//::google::protobuf::Metadata SysCtrlToNavCPU::GetMetadata() const {
//  protobuf_AssignDescriptorsOnce();
//  ::google::protobuf::Metadata metadata;
//  metadata.descriptor = SysCtrlToNavCPU_descriptor_;
//  metadata.reflection = SysCtrlToNavCPU_reflection_;
//  return metadata;
//}
//
//#if PROTOBUF_INLINE_NOT_IN_HEADERS
//// SysCtrlToNavCPU_Telemetry
//
//// optional int32 GPS = 1;
//void SysCtrlToNavCPU_Telemetry::clear_gps() {
//  gps_ = 0;
//}
// ::google::protobuf::int32 SysCtrlToNavCPU_Telemetry::gps() const {
//  // @@protoc_insertion_point(field_get:monarcpb.SysCtrlToNavCPU.Telemetry.GPS)
//  return gps_;
//}
// void SysCtrlToNavCPU_Telemetry::set_gps(::google::protobuf::int32 value) {
//
//  gps_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.SysCtrlToNavCPU.Telemetry.GPS)
//}
//
//// -------------------------------------------------------------------
//
//// SysCtrlToNavCPU_ComputerState
//
//// -------------------------------------------------------------------
//
//// SysCtrlToNavCPU_FlightControl
//
//// -------------------------------------------------------------------
//
//// SysCtrlToNavCPU
//
//// optional .monarcpb.SysCtrlToNavCPU.Telemetry telemetry = 1;
//bool SysCtrlToNavCPU::has_telemetry() const {
//  return !_is_default_instance_ && telemetry_ != NULL;
//}
//void SysCtrlToNavCPU::clear_telemetry() {
//  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
//  telemetry_ = NULL;
//}
//const ::monarcpb::SysCtrlToNavCPU_Telemetry& SysCtrlToNavCPU::telemetry() const {
//  // @@protoc_insertion_point(field_get:monarcpb.SysCtrlToNavCPU.telemetry)
//  return telemetry_ != NULL ? *telemetry_ : *default_instance_->telemetry_;
//}
//::monarcpb::SysCtrlToNavCPU_Telemetry* SysCtrlToNavCPU::mutable_telemetry() {
//
//  if (telemetry_ == NULL) {
//    telemetry_ = new ::monarcpb::SysCtrlToNavCPU_Telemetry;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.SysCtrlToNavCPU.telemetry)
//  return telemetry_;
//}
//::monarcpb::SysCtrlToNavCPU_Telemetry* SysCtrlToNavCPU::release_telemetry() {
//  // @@protoc_insertion_point(field_release:monarcpb.SysCtrlToNavCPU.telemetry)
//
//  ::monarcpb::SysCtrlToNavCPU_Telemetry* temp = telemetry_;
//  telemetry_ = NULL;
//  return temp;
//}
//void SysCtrlToNavCPU::set_allocated_telemetry(::monarcpb::SysCtrlToNavCPU_Telemetry* telemetry) {
//  delete telemetry_;
//  telemetry_ = telemetry;
//  if (telemetry) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.SysCtrlToNavCPU.telemetry)
//}
//
//// optional .monarcpb.SysCtrlToNavCPU.ComputerState state = 2;
//bool SysCtrlToNavCPU::has_state() const {
//  return !_is_default_instance_ && state_ != NULL;
//}
//void SysCtrlToNavCPU::clear_state() {
//  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
//  state_ = NULL;
//}
//const ::monarcpb::SysCtrlToNavCPU_ComputerState& SysCtrlToNavCPU::state() const {
//  // @@protoc_insertion_point(field_get:monarcpb.SysCtrlToNavCPU.state)
//  return state_ != NULL ? *state_ : *default_instance_->state_;
//}
//::monarcpb::SysCtrlToNavCPU_ComputerState* SysCtrlToNavCPU::mutable_state() {
//
//  if (state_ == NULL) {
//    state_ = new ::monarcpb::SysCtrlToNavCPU_ComputerState;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.SysCtrlToNavCPU.state)
//  return state_;
//}
//::monarcpb::SysCtrlToNavCPU_ComputerState* SysCtrlToNavCPU::release_state() {
//  // @@protoc_insertion_point(field_release:monarcpb.SysCtrlToNavCPU.state)
//
//  ::monarcpb::SysCtrlToNavCPU_ComputerState* temp = state_;
//  state_ = NULL;
//  return temp;
//}
//void SysCtrlToNavCPU::set_allocated_state(::monarcpb::SysCtrlToNavCPU_ComputerState* state) {
//  delete state_;
//  state_ = state;
//  if (state) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.SysCtrlToNavCPU.state)
//}
//
//// optional .monarcpb.SysCtrlToNavCPU.FlightControl control = 3;
//bool SysCtrlToNavCPU::has_control() const {
//  return !_is_default_instance_ && control_ != NULL;
//}
//void SysCtrlToNavCPU::clear_control() {
//  if (GetArenaNoVirtual() == NULL && control_ != NULL) delete control_;
//  control_ = NULL;
//}
//const ::monarcpb::SysCtrlToNavCPU_FlightControl& SysCtrlToNavCPU::control() const {
//  // @@protoc_insertion_point(field_get:monarcpb.SysCtrlToNavCPU.control)
//  return control_ != NULL ? *control_ : *default_instance_->control_;
//}
//::monarcpb::SysCtrlToNavCPU_FlightControl* SysCtrlToNavCPU::mutable_control() {
//
//  if (control_ == NULL) {
//    control_ = new ::monarcpb::SysCtrlToNavCPU_FlightControl;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.SysCtrlToNavCPU.control)
//  return control_;
//}
//::monarcpb::SysCtrlToNavCPU_FlightControl* SysCtrlToNavCPU::release_control() {
//  // @@protoc_insertion_point(field_release:monarcpb.SysCtrlToNavCPU.control)
//
//  ::monarcpb::SysCtrlToNavCPU_FlightControl* temp = control_;
//  control_ = NULL;
//  return temp;
//}
//void SysCtrlToNavCPU::set_allocated_control(::monarcpb::SysCtrlToNavCPU_FlightControl* control) {
//  delete control_;
//  control_ = control;
//  if (control) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.SysCtrlToNavCPU.control)
//}
//
//#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
//
//// @@protoc_insertion_point(namespace_scope)
//
//}  // namespace monarcpb
//
//// @@protoc_insertion_point(global_scope)
