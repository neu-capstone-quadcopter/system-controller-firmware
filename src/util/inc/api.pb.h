//// Generated by the protocol buffer compiler.  DO NOT EDIT!
//// source: api.proto
//
//#ifndef PROTOBUF_api_2eproto__INCLUDED
//#define PROTOBUF_api_2eproto__INCLUDED
//
//#include <string>
//
//#include <google/protobuf/stubs/common.h>
//
//#if GOOGLE_PROTOBUF_VERSION < 3000000
//#error This file was generated by a newer version of protoc which is
//#error incompatible with your Protocol Buffer headers.  Please update
//#error your headers.
//#endif
//#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
//#error This file was generated by an older version of protoc which is
//#error incompatible with your Protocol Buffer headers.  Please
//#error regenerate this file with a newer version of protoc.
//#endif
//
//#include <google/protobuf/arena.h>
//#include <google/protobuf/arenastring.h>
//#include <google/protobuf/generated_message_util.h>
//#include <google/protobuf/metadata.h>
//#include <google/protobuf/message.h>
//#include <google/protobuf/repeated_field.h>
//#include <google/protobuf/extension_set.h>
//#include <google/protobuf/unknown_field_set.h>
//// @@protoc_insertion_point(includes)
//
//namespace monarcpb {
//
//// Internal implementation detail -- do not call these.
//void protobuf_AddDesc_api_2eproto();
//void protobuf_AssignDesc_api_2eproto();
//void protobuf_ShutdownFile_api_2eproto();
//
//class NavCPUToSysCtrl;
//class NavCPUToSysCtrl_AnalogSensors;
//class NavCPUToSysCtrl_NavigationCommand;
//class NavCPUToSysCtrl_Telemetry;
//class SysCtrlToNavCPU;
//class SysCtrlToNavCPU_ComputerState;
//class SysCtrlToNavCPU_FlightControl;
//class SysCtrlToNavCPU_Telemetry;
//class ThreeAxis;
//
//// ===================================================================
//
//class ThreeAxis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monarcpb.ThreeAxis) */ {
// public:
//  ThreeAxis();
//  virtual ~ThreeAxis();
//
//  ThreeAxis(const ThreeAxis& from);
//
//  inline ThreeAxis& operator=(const ThreeAxis& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const ThreeAxis& default_instance();
//
//  void Swap(ThreeAxis* other);
//
//  // implements Message ----------------------------------------------
//
//  inline ThreeAxis* New() const { return New(NULL); }
//
//  ThreeAxis* New(::google::protobuf::Arena* arena) const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const ThreeAxis& from);
//  void MergeFrom(const ThreeAxis& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
//      bool deterministic, ::google::protobuf::uint8* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
//    return InternalSerializeWithCachedSizesToArray(false, output);
//  }
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  void InternalSwap(ThreeAxis* other);
//  private:
//  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
//    return _internal_metadata_.arena();
//  }
//  inline void* MaybeArenaPtr() const {
//    return _internal_metadata_.raw_arena_ptr();
//  }
//  public:
//
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  // accessors -------------------------------------------------------
//
//  // optional int32 x = 1;
//  void clear_x();
//  static const int kXFieldNumber = 1;
//  ::google::protobuf::int32 x() const;
//  void set_x(::google::protobuf::int32 value);
//
//  // optional int32 y = 2;
//  void clear_y();
//  static const int kYFieldNumber = 2;
//  ::google::protobuf::int32 y() const;
//  void set_y(::google::protobuf::int32 value);
//
//  // optional int32 z = 3;
//  void clear_z();
//  static const int kZFieldNumber = 3;
//  ::google::protobuf::int32 z() const;
//  void set_z(::google::protobuf::int32 value);
//
//  // @@protoc_insertion_point(class_scope:monarcpb.ThreeAxis)
// private:
//
//  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
//  bool _is_default_instance_;
//  ::google::protobuf::int32 x_;
//  ::google::protobuf::int32 y_;
//  ::google::protobuf::int32 z_;
//  mutable int _cached_size_;
//  friend void  protobuf_AddDesc_api_2eproto();
//  friend void protobuf_AssignDesc_api_2eproto();
//  friend void protobuf_ShutdownFile_api_2eproto();
//
//  void InitAsDefaultInstance();
//  static ThreeAxis* default_instance_;
//};
//// -------------------------------------------------------------------
//
//class NavCPUToSysCtrl_Telemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monarcpb.NavCPUToSysCtrl.Telemetry) */ {
// public:
//  NavCPUToSysCtrl_Telemetry();
//  virtual ~NavCPUToSysCtrl_Telemetry();
//
//  NavCPUToSysCtrl_Telemetry(const NavCPUToSysCtrl_Telemetry& from);
//
//  inline NavCPUToSysCtrl_Telemetry& operator=(const NavCPUToSysCtrl_Telemetry& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const NavCPUToSysCtrl_Telemetry& default_instance();
//
//  void Swap(NavCPUToSysCtrl_Telemetry* other);
//
//  // implements Message ----------------------------------------------
//
//  inline NavCPUToSysCtrl_Telemetry* New() const { return New(NULL); }
//
//  NavCPUToSysCtrl_Telemetry* New(::google::protobuf::Arena* arena) const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const NavCPUToSysCtrl_Telemetry& from);
//  void MergeFrom(const NavCPUToSysCtrl_Telemetry& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
//      bool deterministic, ::google::protobuf::uint8* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
//    return InternalSerializeWithCachedSizesToArray(false, output);
//  }
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  void InternalSwap(NavCPUToSysCtrl_Telemetry* other);
//  private:
//  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
//    return _internal_metadata_.arena();
//  }
//  inline void* MaybeArenaPtr() const {
//    return _internal_metadata_.raw_arena_ptr();
//  }
//  public:
//
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  // accessors -------------------------------------------------------
//
//  // optional .monarcpb.ThreeAxis accelerometer = 1;
//  bool has_accelerometer() const;
//  void clear_accelerometer();
//  static const int kAccelerometerFieldNumber = 1;
//  const ::monarcpb::ThreeAxis& accelerometer() const;
//  ::monarcpb::ThreeAxis* mutable_accelerometer();
//  ::monarcpb::ThreeAxis* release_accelerometer();
//  void set_allocated_accelerometer(::monarcpb::ThreeAxis* accelerometer);
//
//  // optional .monarcpb.ThreeAxis gyroscope = 2;
//  bool has_gyroscope() const;
//  void clear_gyroscope();
//  static const int kGyroscopeFieldNumber = 2;
//  const ::monarcpb::ThreeAxis& gyroscope() const;
//  ::monarcpb::ThreeAxis* mutable_gyroscope();
//  ::monarcpb::ThreeAxis* release_gyroscope();
//  void set_allocated_gyroscope(::monarcpb::ThreeAxis* gyroscope);
//
//  // optional .monarcpb.ThreeAxis magnetometer = 3;
//  bool has_magnetometer() const;
//  void clear_magnetometer();
//  static const int kMagnetometerFieldNumber = 3;
//  const ::monarcpb::ThreeAxis& magnetometer() const;
//  ::monarcpb::ThreeAxis* mutable_magnetometer();
//  ::monarcpb::ThreeAxis* release_magnetometer();
//  void set_allocated_magnetometer(::monarcpb::ThreeAxis* magnetometer);
//
//  // optional int32 atmospheric_pressure = 4;
//  void clear_atmospheric_pressure();
//  static const int kAtmosphericPressureFieldNumber = 4;
//  ::google::protobuf::int32 atmospheric_pressure() const;
//  void set_atmospheric_pressure(::google::protobuf::int32 value);
//
//  // optional int32 altitude = 5;
//  void clear_altitude();
//  static const int kAltitudeFieldNumber = 5;
//  ::google::protobuf::int32 altitude() const;
//  void set_altitude(::google::protobuf::int32 value);
//
//  // @@protoc_insertion_point(class_scope:monarcpb.NavCPUToSysCtrl.Telemetry)
// private:
//
//  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
//  bool _is_default_instance_;
//  ::monarcpb::ThreeAxis* accelerometer_;
//  ::monarcpb::ThreeAxis* gyroscope_;
//  ::monarcpb::ThreeAxis* magnetometer_;
//  ::google::protobuf::int32 atmospheric_pressure_;
//  ::google::protobuf::int32 altitude_;
//  mutable int _cached_size_;
//  friend void  protobuf_AddDesc_api_2eproto();
//  friend void protobuf_AssignDesc_api_2eproto();
//  friend void protobuf_ShutdownFile_api_2eproto();
//
//  void InitAsDefaultInstance();
//  static NavCPUToSysCtrl_Telemetry* default_instance_;
//};
//// -------------------------------------------------------------------
//
//class NavCPUToSysCtrl_AnalogSensors : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monarcpb.NavCPUToSysCtrl.AnalogSensors) */ {
// public:
//  NavCPUToSysCtrl_AnalogSensors();
//  virtual ~NavCPUToSysCtrl_AnalogSensors();
//
//  NavCPUToSysCtrl_AnalogSensors(const NavCPUToSysCtrl_AnalogSensors& from);
//
//  inline NavCPUToSysCtrl_AnalogSensors& operator=(const NavCPUToSysCtrl_AnalogSensors& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const NavCPUToSysCtrl_AnalogSensors& default_instance();
//
//  void Swap(NavCPUToSysCtrl_AnalogSensors* other);
//
//  // implements Message ----------------------------------------------
//
//  inline NavCPUToSysCtrl_AnalogSensors* New() const { return New(NULL); }
//
//  NavCPUToSysCtrl_AnalogSensors* New(::google::protobuf::Arena* arena) const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const NavCPUToSysCtrl_AnalogSensors& from);
//  void MergeFrom(const NavCPUToSysCtrl_AnalogSensors& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
//      bool deterministic, ::google::protobuf::uint8* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
//    return InternalSerializeWithCachedSizesToArray(false, output);
//  }
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  void InternalSwap(NavCPUToSysCtrl_AnalogSensors* other);
//  private:
//  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
//    return _internal_metadata_.arena();
//  }
//  inline void* MaybeArenaPtr() const {
//    return _internal_metadata_.raw_arena_ptr();
//  }
//  public:
//
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  // accessors -------------------------------------------------------
//
//  // optional int32 current = 1;
//  void clear_current();
//  static const int kCurrentFieldNumber = 1;
//  ::google::protobuf::int32 current() const;
//  void set_current(::google::protobuf::int32 value);
//
//  // optional int32 voltage = 2;
//  void clear_voltage();
//  static const int kVoltageFieldNumber = 2;
//  ::google::protobuf::int32 voltage() const;
//  void set_voltage(::google::protobuf::int32 value);
//
//  // @@protoc_insertion_point(class_scope:monarcpb.NavCPUToSysCtrl.AnalogSensors)
// private:
//
//  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
//  bool _is_default_instance_;
//  ::google::protobuf::int32 current_;
//  ::google::protobuf::int32 voltage_;
//  mutable int _cached_size_;
//  friend void  protobuf_AddDesc_api_2eproto();
//  friend void protobuf_AssignDesc_api_2eproto();
//  friend void protobuf_ShutdownFile_api_2eproto();
//
//  void InitAsDefaultInstance();
//  static NavCPUToSysCtrl_AnalogSensors* default_instance_;
//};
//// -------------------------------------------------------------------
//
//class NavCPUToSysCtrl_NavigationCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monarcpb.NavCPUToSysCtrl.NavigationCommand) */ {
// public:
//  NavCPUToSysCtrl_NavigationCommand();
//  virtual ~NavCPUToSysCtrl_NavigationCommand();
//
//  NavCPUToSysCtrl_NavigationCommand(const NavCPUToSysCtrl_NavigationCommand& from);
//
//  inline NavCPUToSysCtrl_NavigationCommand& operator=(const NavCPUToSysCtrl_NavigationCommand& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const NavCPUToSysCtrl_NavigationCommand& default_instance();
//
//  void Swap(NavCPUToSysCtrl_NavigationCommand* other);
//
//  // implements Message ----------------------------------------------
//
//  inline NavCPUToSysCtrl_NavigationCommand* New() const { return New(NULL); }
//
//  NavCPUToSysCtrl_NavigationCommand* New(::google::protobuf::Arena* arena) const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const NavCPUToSysCtrl_NavigationCommand& from);
//  void MergeFrom(const NavCPUToSysCtrl_NavigationCommand& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
//      bool deterministic, ::google::protobuf::uint8* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
//    return InternalSerializeWithCachedSizesToArray(false, output);
//  }
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  void InternalSwap(NavCPUToSysCtrl_NavigationCommand* other);
//  private:
//  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
//    return _internal_metadata_.arena();
//  }
//  inline void* MaybeArenaPtr() const {
//    return _internal_metadata_.raw_arena_ptr();
//  }
//  public:
//
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  // accessors -------------------------------------------------------
//
//  // @@protoc_insertion_point(class_scope:monarcpb.NavCPUToSysCtrl.NavigationCommand)
// private:
//
//  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
//  bool _is_default_instance_;
//  mutable int _cached_size_;
//  friend void  protobuf_AddDesc_api_2eproto();
//  friend void protobuf_AssignDesc_api_2eproto();
//  friend void protobuf_ShutdownFile_api_2eproto();
//
//  void InitAsDefaultInstance();
//  static NavCPUToSysCtrl_NavigationCommand* default_instance_;
//};
//// -------------------------------------------------------------------
//
//class NavCPUToSysCtrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monarcpb.NavCPUToSysCtrl) */ {
// public:
//  NavCPUToSysCtrl();
//  virtual ~NavCPUToSysCtrl();
//
//  NavCPUToSysCtrl(const NavCPUToSysCtrl& from);
//
//  inline NavCPUToSysCtrl& operator=(const NavCPUToSysCtrl& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const NavCPUToSysCtrl& default_instance();
//
//  void Swap(NavCPUToSysCtrl* other);
//
//  // implements Message ----------------------------------------------
//
//  inline NavCPUToSysCtrl* New() const { return New(NULL); }
//
//  NavCPUToSysCtrl* New(::google::protobuf::Arena* arena) const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const NavCPUToSysCtrl& from);
//  void MergeFrom(const NavCPUToSysCtrl& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
//      bool deterministic, ::google::protobuf::uint8* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
//    return InternalSerializeWithCachedSizesToArray(false, output);
//  }
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  void InternalSwap(NavCPUToSysCtrl* other);
//  private:
//  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
//    return _internal_metadata_.arena();
//  }
//  inline void* MaybeArenaPtr() const {
//    return _internal_metadata_.raw_arena_ptr();
//  }
//  public:
//
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  typedef NavCPUToSysCtrl_Telemetry Telemetry;
//  typedef NavCPUToSysCtrl_AnalogSensors AnalogSensors;
//  typedef NavCPUToSysCtrl_NavigationCommand NavigationCommand;
//
//  // accessors -------------------------------------------------------
//
//  // optional .monarcpb.NavCPUToSysCtrl.Telemetry telemetry = 1;
//  bool has_telemetry() const;
//  void clear_telemetry();
//  static const int kTelemetryFieldNumber = 1;
//  const ::monarcpb::NavCPUToSysCtrl_Telemetry& telemetry() const;
//  ::monarcpb::NavCPUToSysCtrl_Telemetry* mutable_telemetry();
//  ::monarcpb::NavCPUToSysCtrl_Telemetry* release_telemetry();
//  void set_allocated_telemetry(::monarcpb::NavCPUToSysCtrl_Telemetry* telemetry);
//
//  // optional .monarcpb.NavCPUToSysCtrl.AnalogSensors analog_sensors = 2;
//  bool has_analog_sensors() const;
//  void clear_analog_sensors();
//  static const int kAnalogSensorsFieldNumber = 2;
//  const ::monarcpb::NavCPUToSysCtrl_AnalogSensors& analog_sensors() const;
//  ::monarcpb::NavCPUToSysCtrl_AnalogSensors* mutable_analog_sensors();
//  ::monarcpb::NavCPUToSysCtrl_AnalogSensors* release_analog_sensors();
//  void set_allocated_analog_sensors(::monarcpb::NavCPUToSysCtrl_AnalogSensors* analog_sensors);
//
//  // optional .monarcpb.NavCPUToSysCtrl.NavigationCommand command = 3;
//  bool has_command() const;
//  void clear_command();
//  static const int kCommandFieldNumber = 3;
//  const ::monarcpb::NavCPUToSysCtrl_NavigationCommand& command() const;
//  ::monarcpb::NavCPUToSysCtrl_NavigationCommand* mutable_command();
//  ::monarcpb::NavCPUToSysCtrl_NavigationCommand* release_command();
//  void set_allocated_command(::monarcpb::NavCPUToSysCtrl_NavigationCommand* command);
//
//  // @@protoc_insertion_point(class_scope:monarcpb.NavCPUToSysCtrl)
// private:
//
//  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
//  bool _is_default_instance_;
//  ::monarcpb::NavCPUToSysCtrl_Telemetry* telemetry_;
//  ::monarcpb::NavCPUToSysCtrl_AnalogSensors* analog_sensors_;
//  ::monarcpb::NavCPUToSysCtrl_NavigationCommand* command_;
//  mutable int _cached_size_;
//  friend void  protobuf_AddDesc_api_2eproto();
//  friend void protobuf_AssignDesc_api_2eproto();
//  friend void protobuf_ShutdownFile_api_2eproto();
//
//  void InitAsDefaultInstance();
//  static NavCPUToSysCtrl* default_instance_;
//};
//// -------------------------------------------------------------------
//
//class SysCtrlToNavCPU_Telemetry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monarcpb.SysCtrlToNavCPU.Telemetry) */ {
// public:
//  SysCtrlToNavCPU_Telemetry();
//  virtual ~SysCtrlToNavCPU_Telemetry();
//
//  SysCtrlToNavCPU_Telemetry(const SysCtrlToNavCPU_Telemetry& from);
//
//  inline SysCtrlToNavCPU_Telemetry& operator=(const SysCtrlToNavCPU_Telemetry& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const SysCtrlToNavCPU_Telemetry& default_instance();
//
//  void Swap(SysCtrlToNavCPU_Telemetry* other);
//
//  // implements Message ----------------------------------------------
//
//  inline SysCtrlToNavCPU_Telemetry* New() const { return New(NULL); }
//
//  SysCtrlToNavCPU_Telemetry* New(::google::protobuf::Arena* arena) const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const SysCtrlToNavCPU_Telemetry& from);
//  void MergeFrom(const SysCtrlToNavCPU_Telemetry& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
//      bool deterministic, ::google::protobuf::uint8* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
//    return InternalSerializeWithCachedSizesToArray(false, output);
//  }
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  void InternalSwap(SysCtrlToNavCPU_Telemetry* other);
//  private:
//  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
//    return _internal_metadata_.arena();
//  }
//  inline void* MaybeArenaPtr() const {
//    return _internal_metadata_.raw_arena_ptr();
//  }
//  public:
//
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  // accessors -------------------------------------------------------
//
//  // optional int32 GPS = 1;
//  void clear_gps();
//  static const int kGPSFieldNumber = 1;
//  ::google::protobuf::int32 gps() const;
//  void set_gps(::google::protobuf::int32 value);
//
//  // @@protoc_insertion_point(class_scope:monarcpb.SysCtrlToNavCPU.Telemetry)
// private:
//
//  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
//  bool _is_default_instance_;
//  ::google::protobuf::int32 gps_;
//  mutable int _cached_size_;
//  friend void  protobuf_AddDesc_api_2eproto();
//  friend void protobuf_AssignDesc_api_2eproto();
//  friend void protobuf_ShutdownFile_api_2eproto();
//
//  void InitAsDefaultInstance();
//  static SysCtrlToNavCPU_Telemetry* default_instance_;
//};
//// -------------------------------------------------------------------
//
//class SysCtrlToNavCPU_ComputerState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monarcpb.SysCtrlToNavCPU.ComputerState) */ {
// public:
//  SysCtrlToNavCPU_ComputerState();
//  virtual ~SysCtrlToNavCPU_ComputerState();
//
//  SysCtrlToNavCPU_ComputerState(const SysCtrlToNavCPU_ComputerState& from);
//
//  inline SysCtrlToNavCPU_ComputerState& operator=(const SysCtrlToNavCPU_ComputerState& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const SysCtrlToNavCPU_ComputerState& default_instance();
//
//  void Swap(SysCtrlToNavCPU_ComputerState* other);
//
//  // implements Message ----------------------------------------------
//
//  inline SysCtrlToNavCPU_ComputerState* New() const { return New(NULL); }
//
//  SysCtrlToNavCPU_ComputerState* New(::google::protobuf::Arena* arena) const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const SysCtrlToNavCPU_ComputerState& from);
//  void MergeFrom(const SysCtrlToNavCPU_ComputerState& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
//      bool deterministic, ::google::protobuf::uint8* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
//    return InternalSerializeWithCachedSizesToArray(false, output);
//  }
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  void InternalSwap(SysCtrlToNavCPU_ComputerState* other);
//  private:
//  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
//    return _internal_metadata_.arena();
//  }
//  inline void* MaybeArenaPtr() const {
//    return _internal_metadata_.raw_arena_ptr();
//  }
//  public:
//
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  // accessors -------------------------------------------------------
//
//  // @@protoc_insertion_point(class_scope:monarcpb.SysCtrlToNavCPU.ComputerState)
// private:
//
//  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
//  bool _is_default_instance_;
//  mutable int _cached_size_;
//  friend void  protobuf_AddDesc_api_2eproto();
//  friend void protobuf_AssignDesc_api_2eproto();
//  friend void protobuf_ShutdownFile_api_2eproto();
//
//  void InitAsDefaultInstance();
//  static SysCtrlToNavCPU_ComputerState* default_instance_;
//};
//// -------------------------------------------------------------------
//
//class SysCtrlToNavCPU_FlightControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monarcpb.SysCtrlToNavCPU.FlightControl) */ {
// public:
//  SysCtrlToNavCPU_FlightControl();
//  virtual ~SysCtrlToNavCPU_FlightControl();
//
//  SysCtrlToNavCPU_FlightControl(const SysCtrlToNavCPU_FlightControl& from);
//
//  inline SysCtrlToNavCPU_FlightControl& operator=(const SysCtrlToNavCPU_FlightControl& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const SysCtrlToNavCPU_FlightControl& default_instance();
//
//  void Swap(SysCtrlToNavCPU_FlightControl* other);
//
//  // implements Message ----------------------------------------------
//
//  inline SysCtrlToNavCPU_FlightControl* New() const { return New(NULL); }
//
//  SysCtrlToNavCPU_FlightControl* New(::google::protobuf::Arena* arena) const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const SysCtrlToNavCPU_FlightControl& from);
//  void MergeFrom(const SysCtrlToNavCPU_FlightControl& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
//      bool deterministic, ::google::protobuf::uint8* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
//    return InternalSerializeWithCachedSizesToArray(false, output);
//  }
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  void InternalSwap(SysCtrlToNavCPU_FlightControl* other);
//  private:
//  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
//    return _internal_metadata_.arena();
//  }
//  inline void* MaybeArenaPtr() const {
//    return _internal_metadata_.raw_arena_ptr();
//  }
//  public:
//
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  // accessors -------------------------------------------------------
//
//  // @@protoc_insertion_point(class_scope:monarcpb.SysCtrlToNavCPU.FlightControl)
// private:
//
//  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
//  bool _is_default_instance_;
//  mutable int _cached_size_;
//  friend void  protobuf_AddDesc_api_2eproto();
//  friend void protobuf_AssignDesc_api_2eproto();
//  friend void protobuf_ShutdownFile_api_2eproto();
//
//  void InitAsDefaultInstance();
//  static SysCtrlToNavCPU_FlightControl* default_instance_;
//};
//// -------------------------------------------------------------------
//
//class SysCtrlToNavCPU : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:monarcpb.SysCtrlToNavCPU) */ {
// public:
//  SysCtrlToNavCPU();
//  virtual ~SysCtrlToNavCPU();
//
//  SysCtrlToNavCPU(const SysCtrlToNavCPU& from);
//
//  inline SysCtrlToNavCPU& operator=(const SysCtrlToNavCPU& from) {
//    CopyFrom(from);
//    return *this;
//  }
//
//  static const ::google::protobuf::Descriptor* descriptor();
//  static const SysCtrlToNavCPU& default_instance();
//
//  void Swap(SysCtrlToNavCPU* other);
//
//  // implements Message ----------------------------------------------
//
//  inline SysCtrlToNavCPU* New() const { return New(NULL); }
//
//  SysCtrlToNavCPU* New(::google::protobuf::Arena* arena) const;
//  void CopyFrom(const ::google::protobuf::Message& from);
//  void MergeFrom(const ::google::protobuf::Message& from);
//  void CopyFrom(const SysCtrlToNavCPU& from);
//  void MergeFrom(const SysCtrlToNavCPU& from);
//  void Clear();
//  bool IsInitialized() const;
//
//  int ByteSize() const;
//  bool MergePartialFromCodedStream(
//      ::google::protobuf::io::CodedInputStream* input);
//  void SerializeWithCachedSizes(
//      ::google::protobuf::io::CodedOutputStream* output) const;
//  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
//      bool deterministic, ::google::protobuf::uint8* output) const;
//  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
//    return InternalSerializeWithCachedSizesToArray(false, output);
//  }
//  int GetCachedSize() const { return _cached_size_; }
//  private:
//  void SharedCtor();
//  void SharedDtor();
//  void SetCachedSize(int size) const;
//  void InternalSwap(SysCtrlToNavCPU* other);
//  private:
//  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
//    return _internal_metadata_.arena();
//  }
//  inline void* MaybeArenaPtr() const {
//    return _internal_metadata_.raw_arena_ptr();
//  }
//  public:
//
//  ::google::protobuf::Metadata GetMetadata() const;
//
//  // nested types ----------------------------------------------------
//
//  typedef SysCtrlToNavCPU_Telemetry Telemetry;
//  typedef SysCtrlToNavCPU_ComputerState ComputerState;
//  typedef SysCtrlToNavCPU_FlightControl FlightControl;
//
//  // accessors -------------------------------------------------------
//
//  // optional .monarcpb.SysCtrlToNavCPU.Telemetry telemetry = 1;
//  bool has_telemetry() const;
//  void clear_telemetry();
//  static const int kTelemetryFieldNumber = 1;
//  const ::monarcpb::SysCtrlToNavCPU_Telemetry& telemetry() const;
//  ::monarcpb::SysCtrlToNavCPU_Telemetry* mutable_telemetry();
//  ::monarcpb::SysCtrlToNavCPU_Telemetry* release_telemetry();
//  void set_allocated_telemetry(::monarcpb::SysCtrlToNavCPU_Telemetry* telemetry);
//
//  // optional .monarcpb.SysCtrlToNavCPU.ComputerState state = 2;
//  bool has_state() const;
//  void clear_state();
//  static const int kStateFieldNumber = 2;
//  const ::monarcpb::SysCtrlToNavCPU_ComputerState& state() const;
//  ::monarcpb::SysCtrlToNavCPU_ComputerState* mutable_state();
//  ::monarcpb::SysCtrlToNavCPU_ComputerState* release_state();
//  void set_allocated_state(::monarcpb::SysCtrlToNavCPU_ComputerState* state);
//
//  // optional .monarcpb.SysCtrlToNavCPU.FlightControl control = 3;
//  bool has_control() const;
//  void clear_control();
//  static const int kControlFieldNumber = 3;
//  const ::monarcpb::SysCtrlToNavCPU_FlightControl& control() const;
//  ::monarcpb::SysCtrlToNavCPU_FlightControl* mutable_control();
//  ::monarcpb::SysCtrlToNavCPU_FlightControl* release_control();
//  void set_allocated_control(::monarcpb::SysCtrlToNavCPU_FlightControl* control);
//
//  // @@protoc_insertion_point(class_scope:monarcpb.SysCtrlToNavCPU)
// private:
//
//  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
//  bool _is_default_instance_;
//  ::monarcpb::SysCtrlToNavCPU_Telemetry* telemetry_;
//  ::monarcpb::SysCtrlToNavCPU_ComputerState* state_;
//  ::monarcpb::SysCtrlToNavCPU_FlightControl* control_;
//  mutable int _cached_size_;
//  friend void  protobuf_AddDesc_api_2eproto();
//  friend void protobuf_AssignDesc_api_2eproto();
//  friend void protobuf_ShutdownFile_api_2eproto();
//
//  void InitAsDefaultInstance();
//  static SysCtrlToNavCPU* default_instance_;
//};
//// ===================================================================
//
//
//// ===================================================================
//
//#if !PROTOBUF_INLINE_NOT_IN_HEADERS
//// ThreeAxis
//
//// optional int32 x = 1;
//inline void ThreeAxis::clear_x() {
//  x_ = 0;
//}
//inline ::google::protobuf::int32 ThreeAxis::x() const {
//  // @@protoc_insertion_point(field_get:monarcpb.ThreeAxis.x)
//  return x_;
//}
//inline void ThreeAxis::set_x(::google::protobuf::int32 value) {
//
//  x_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.ThreeAxis.x)
//}
//
//// optional int32 y = 2;
//inline void ThreeAxis::clear_y() {
//  y_ = 0;
//}
//inline ::google::protobuf::int32 ThreeAxis::y() const {
//  // @@protoc_insertion_point(field_get:monarcpb.ThreeAxis.y)
//  return y_;
//}
//inline void ThreeAxis::set_y(::google::protobuf::int32 value) {
//
//  y_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.ThreeAxis.y)
//}
//
//// optional int32 z = 3;
//inline void ThreeAxis::clear_z() {
//  z_ = 0;
//}
//inline ::google::protobuf::int32 ThreeAxis::z() const {
//  // @@protoc_insertion_point(field_get:monarcpb.ThreeAxis.z)
//  return z_;
//}
//inline void ThreeAxis::set_z(::google::protobuf::int32 value) {
//
//  z_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.ThreeAxis.z)
//}
//
//// -------------------------------------------------------------------
//
//// NavCPUToSysCtrl_Telemetry
//
//// optional .monarcpb.ThreeAxis accelerometer = 1;
//inline bool NavCPUToSysCtrl_Telemetry::has_accelerometer() const {
//  return !_is_default_instance_ && accelerometer_ != NULL;
//}
//inline void NavCPUToSysCtrl_Telemetry::clear_accelerometer() {
//  if (GetArenaNoVirtual() == NULL && accelerometer_ != NULL) delete accelerometer_;
//  accelerometer_ = NULL;
//}
//inline const ::monarcpb::ThreeAxis& NavCPUToSysCtrl_Telemetry::accelerometer() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.accelerometer)
//  return accelerometer_ != NULL ? *accelerometer_ : *default_instance_->accelerometer_;
//}
//inline ::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::mutable_accelerometer() {
//
//  if (accelerometer_ == NULL) {
//    accelerometer_ = new ::monarcpb::ThreeAxis;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.Telemetry.accelerometer)
//  return accelerometer_;
//}
//inline ::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::release_accelerometer() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.Telemetry.accelerometer)
//
//  ::monarcpb::ThreeAxis* temp = accelerometer_;
//  accelerometer_ = NULL;
//  return temp;
//}
//inline void NavCPUToSysCtrl_Telemetry::set_allocated_accelerometer(::monarcpb::ThreeAxis* accelerometer) {
//  delete accelerometer_;
//  accelerometer_ = accelerometer;
//  if (accelerometer) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.Telemetry.accelerometer)
//}
//
//// optional .monarcpb.ThreeAxis gyroscope = 2;
//inline bool NavCPUToSysCtrl_Telemetry::has_gyroscope() const {
//  return !_is_default_instance_ && gyroscope_ != NULL;
//}
//inline void NavCPUToSysCtrl_Telemetry::clear_gyroscope() {
//  if (GetArenaNoVirtual() == NULL && gyroscope_ != NULL) delete gyroscope_;
//  gyroscope_ = NULL;
//}
//inline const ::monarcpb::ThreeAxis& NavCPUToSysCtrl_Telemetry::gyroscope() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.gyroscope)
//  return gyroscope_ != NULL ? *gyroscope_ : *default_instance_->gyroscope_;
//}
//inline ::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::mutable_gyroscope() {
//
//  if (gyroscope_ == NULL) {
//    gyroscope_ = new ::monarcpb::ThreeAxis;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.Telemetry.gyroscope)
//  return gyroscope_;
//}
//inline ::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::release_gyroscope() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.Telemetry.gyroscope)
//
//  ::monarcpb::ThreeAxis* temp = gyroscope_;
//  gyroscope_ = NULL;
//  return temp;
//}
//inline void NavCPUToSysCtrl_Telemetry::set_allocated_gyroscope(::monarcpb::ThreeAxis* gyroscope) {
//  delete gyroscope_;
//  gyroscope_ = gyroscope;
//  if (gyroscope) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.Telemetry.gyroscope)
//}
//
//// optional .monarcpb.ThreeAxis magnetometer = 3;
//inline bool NavCPUToSysCtrl_Telemetry::has_magnetometer() const {
//  return !_is_default_instance_ && magnetometer_ != NULL;
//}
//inline void NavCPUToSysCtrl_Telemetry::clear_magnetometer() {
//  if (GetArenaNoVirtual() == NULL && magnetometer_ != NULL) delete magnetometer_;
//  magnetometer_ = NULL;
//}
//inline const ::monarcpb::ThreeAxis& NavCPUToSysCtrl_Telemetry::magnetometer() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.magnetometer)
//  return magnetometer_ != NULL ? *magnetometer_ : *default_instance_->magnetometer_;
//}
//inline ::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::mutable_magnetometer() {
//
//  if (magnetometer_ == NULL) {
//    magnetometer_ = new ::monarcpb::ThreeAxis;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.Telemetry.magnetometer)
//  return magnetometer_;
//}
//inline ::monarcpb::ThreeAxis* NavCPUToSysCtrl_Telemetry::release_magnetometer() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.Telemetry.magnetometer)
//
//  ::monarcpb::ThreeAxis* temp = magnetometer_;
//  magnetometer_ = NULL;
//  return temp;
//}
//inline void NavCPUToSysCtrl_Telemetry::set_allocated_magnetometer(::monarcpb::ThreeAxis* magnetometer) {
//  delete magnetometer_;
//  magnetometer_ = magnetometer;
//  if (magnetometer) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.Telemetry.magnetometer)
//}
//
//// optional int32 atmospheric_pressure = 4;
//inline void NavCPUToSysCtrl_Telemetry::clear_atmospheric_pressure() {
//  atmospheric_pressure_ = 0;
//}
//inline ::google::protobuf::int32 NavCPUToSysCtrl_Telemetry::atmospheric_pressure() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.atmospheric_pressure)
//  return atmospheric_pressure_;
//}
//inline void NavCPUToSysCtrl_Telemetry::set_atmospheric_pressure(::google::protobuf::int32 value) {
//
//  atmospheric_pressure_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.NavCPUToSysCtrl.Telemetry.atmospheric_pressure)
//}
//
//// optional int32 altitude = 5;
//inline void NavCPUToSysCtrl_Telemetry::clear_altitude() {
//  altitude_ = 0;
//}
//inline ::google::protobuf::int32 NavCPUToSysCtrl_Telemetry::altitude() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.Telemetry.altitude)
//  return altitude_;
//}
//inline void NavCPUToSysCtrl_Telemetry::set_altitude(::google::protobuf::int32 value) {
//
//  altitude_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.NavCPUToSysCtrl.Telemetry.altitude)
//}
//
//// -------------------------------------------------------------------
//
//// NavCPUToSysCtrl_AnalogSensors
//
//// optional int32 current = 1;
//inline void NavCPUToSysCtrl_AnalogSensors::clear_current() {
//  current_ = 0;
//}
//inline ::google::protobuf::int32 NavCPUToSysCtrl_AnalogSensors::current() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.AnalogSensors.current)
//  return current_;
//}
//inline void NavCPUToSysCtrl_AnalogSensors::set_current(::google::protobuf::int32 value) {
//
//  current_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.NavCPUToSysCtrl.AnalogSensors.current)
//}
//
//// optional int32 voltage = 2;
//inline void NavCPUToSysCtrl_AnalogSensors::clear_voltage() {
//  voltage_ = 0;
//}
//inline ::google::protobuf::int32 NavCPUToSysCtrl_AnalogSensors::voltage() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.AnalogSensors.voltage)
//  return voltage_;
//}
//inline void NavCPUToSysCtrl_AnalogSensors::set_voltage(::google::protobuf::int32 value) {
//
//  voltage_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.NavCPUToSysCtrl.AnalogSensors.voltage)
//}
//
//// -------------------------------------------------------------------
//
//// NavCPUToSysCtrl_NavigationCommand
//
//// -------------------------------------------------------------------
//
//// NavCPUToSysCtrl
//
//// optional .monarcpb.NavCPUToSysCtrl.Telemetry telemetry = 1;
//inline bool NavCPUToSysCtrl::has_telemetry() const {
//  return !_is_default_instance_ && telemetry_ != NULL;
//}
//inline void NavCPUToSysCtrl::clear_telemetry() {
//  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
//  telemetry_ = NULL;
//}
//inline const ::monarcpb::NavCPUToSysCtrl_Telemetry& NavCPUToSysCtrl::telemetry() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.telemetry)
//  return telemetry_ != NULL ? *telemetry_ : *default_instance_->telemetry_;
//}
//inline ::monarcpb::NavCPUToSysCtrl_Telemetry* NavCPUToSysCtrl::mutable_telemetry() {
//
//  if (telemetry_ == NULL) {
//    telemetry_ = new ::monarcpb::NavCPUToSysCtrl_Telemetry;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.telemetry)
//  return telemetry_;
//}
//inline ::monarcpb::NavCPUToSysCtrl_Telemetry* NavCPUToSysCtrl::release_telemetry() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.telemetry)
//
//  ::monarcpb::NavCPUToSysCtrl_Telemetry* temp = telemetry_;
//  telemetry_ = NULL;
//  return temp;
//}
//inline void NavCPUToSysCtrl::set_allocated_telemetry(::monarcpb::NavCPUToSysCtrl_Telemetry* telemetry) {
//  delete telemetry_;
//  telemetry_ = telemetry;
//  if (telemetry) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.telemetry)
//}
//
//// optional .monarcpb.NavCPUToSysCtrl.AnalogSensors analog_sensors = 2;
//inline bool NavCPUToSysCtrl::has_analog_sensors() const {
//  return !_is_default_instance_ && analog_sensors_ != NULL;
//}
//inline void NavCPUToSysCtrl::clear_analog_sensors() {
//  if (GetArenaNoVirtual() == NULL && analog_sensors_ != NULL) delete analog_sensors_;
//  analog_sensors_ = NULL;
//}
//inline const ::monarcpb::NavCPUToSysCtrl_AnalogSensors& NavCPUToSysCtrl::analog_sensors() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.analog_sensors)
//  return analog_sensors_ != NULL ? *analog_sensors_ : *default_instance_->analog_sensors_;
//}
//inline ::monarcpb::NavCPUToSysCtrl_AnalogSensors* NavCPUToSysCtrl::mutable_analog_sensors() {
//
//  if (analog_sensors_ == NULL) {
//    analog_sensors_ = new ::monarcpb::NavCPUToSysCtrl_AnalogSensors;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.analog_sensors)
//  return analog_sensors_;
//}
//inline ::monarcpb::NavCPUToSysCtrl_AnalogSensors* NavCPUToSysCtrl::release_analog_sensors() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.analog_sensors)
//
//  ::monarcpb::NavCPUToSysCtrl_AnalogSensors* temp = analog_sensors_;
//  analog_sensors_ = NULL;
//  return temp;
//}
//inline void NavCPUToSysCtrl::set_allocated_analog_sensors(::monarcpb::NavCPUToSysCtrl_AnalogSensors* analog_sensors) {
//  delete analog_sensors_;
//  analog_sensors_ = analog_sensors;
//  if (analog_sensors) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.analog_sensors)
//}
//
//// optional .monarcpb.NavCPUToSysCtrl.NavigationCommand command = 3;
//inline bool NavCPUToSysCtrl::has_command() const {
//  return !_is_default_instance_ && command_ != NULL;
//}
//inline void NavCPUToSysCtrl::clear_command() {
//  if (GetArenaNoVirtual() == NULL && command_ != NULL) delete command_;
//  command_ = NULL;
//}
//inline const ::monarcpb::NavCPUToSysCtrl_NavigationCommand& NavCPUToSysCtrl::command() const {
//  // @@protoc_insertion_point(field_get:monarcpb.NavCPUToSysCtrl.command)
//  return command_ != NULL ? *command_ : *default_instance_->command_;
//}
//inline ::monarcpb::NavCPUToSysCtrl_NavigationCommand* NavCPUToSysCtrl::mutable_command() {
//
//  if (command_ == NULL) {
//    command_ = new ::monarcpb::NavCPUToSysCtrl_NavigationCommand;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.NavCPUToSysCtrl.command)
//  return command_;
//}
//inline ::monarcpb::NavCPUToSysCtrl_NavigationCommand* NavCPUToSysCtrl::release_command() {
//  // @@protoc_insertion_point(field_release:monarcpb.NavCPUToSysCtrl.command)
//
//  ::monarcpb::NavCPUToSysCtrl_NavigationCommand* temp = command_;
//  command_ = NULL;
//  return temp;
//}
//inline void NavCPUToSysCtrl::set_allocated_command(::monarcpb::NavCPUToSysCtrl_NavigationCommand* command) {
//  delete command_;
//  command_ = command;
//  if (command) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.NavCPUToSysCtrl.command)
//}
//
//// -------------------------------------------------------------------
//
//// SysCtrlToNavCPU_Telemetry
//
//// optional int32 GPS = 1;
//inline void SysCtrlToNavCPU_Telemetry::clear_gps() {
//  gps_ = 0;
//}
//inline ::google::protobuf::int32 SysCtrlToNavCPU_Telemetry::gps() const {
//  // @@protoc_insertion_point(field_get:monarcpb.SysCtrlToNavCPU.Telemetry.GPS)
//  return gps_;
//}
//inline void SysCtrlToNavCPU_Telemetry::set_gps(::google::protobuf::int32 value) {
//
//  gps_ = value;
//  // @@protoc_insertion_point(field_set:monarcpb.SysCtrlToNavCPU.Telemetry.GPS)
//}
//
//// -------------------------------------------------------------------
//
//// SysCtrlToNavCPU_ComputerState
//
//// -------------------------------------------------------------------
//
//// SysCtrlToNavCPU_FlightControl
//
//// -------------------------------------------------------------------
//
//// SysCtrlToNavCPU
//
//// optional .monarcpb.SysCtrlToNavCPU.Telemetry telemetry = 1;
//inline bool SysCtrlToNavCPU::has_telemetry() const {
//  return !_is_default_instance_ && telemetry_ != NULL;
//}
//inline void SysCtrlToNavCPU::clear_telemetry() {
//  if (GetArenaNoVirtual() == NULL && telemetry_ != NULL) delete telemetry_;
//  telemetry_ = NULL;
//}
//inline const ::monarcpb::SysCtrlToNavCPU_Telemetry& SysCtrlToNavCPU::telemetry() const {
//  // @@protoc_insertion_point(field_get:monarcpb.SysCtrlToNavCPU.telemetry)
//  return telemetry_ != NULL ? *telemetry_ : *default_instance_->telemetry_;
//}
//inline ::monarcpb::SysCtrlToNavCPU_Telemetry* SysCtrlToNavCPU::mutable_telemetry() {
//
//  if (telemetry_ == NULL) {
//    telemetry_ = new ::monarcpb::SysCtrlToNavCPU_Telemetry;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.SysCtrlToNavCPU.telemetry)
//  return telemetry_;
//}
//inline ::monarcpb::SysCtrlToNavCPU_Telemetry* SysCtrlToNavCPU::release_telemetry() {
//  // @@protoc_insertion_point(field_release:monarcpb.SysCtrlToNavCPU.telemetry)
//
//  ::monarcpb::SysCtrlToNavCPU_Telemetry* temp = telemetry_;
//  telemetry_ = NULL;
//  return temp;
//}
//inline void SysCtrlToNavCPU::set_allocated_telemetry(::monarcpb::SysCtrlToNavCPU_Telemetry* telemetry) {
//  delete telemetry_;
//  telemetry_ = telemetry;
//  if (telemetry) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.SysCtrlToNavCPU.telemetry)
//}
//
//// optional .monarcpb.SysCtrlToNavCPU.ComputerState state = 2;
//inline bool SysCtrlToNavCPU::has_state() const {
//  return !_is_default_instance_ && state_ != NULL;
//}
//inline void SysCtrlToNavCPU::clear_state() {
//  if (GetArenaNoVirtual() == NULL && state_ != NULL) delete state_;
//  state_ = NULL;
//}
//inline const ::monarcpb::SysCtrlToNavCPU_ComputerState& SysCtrlToNavCPU::state() const {
//  // @@protoc_insertion_point(field_get:monarcpb.SysCtrlToNavCPU.state)
//  return state_ != NULL ? *state_ : *default_instance_->state_;
//}
//inline ::monarcpb::SysCtrlToNavCPU_ComputerState* SysCtrlToNavCPU::mutable_state() {
//
//  if (state_ == NULL) {
//    state_ = new ::monarcpb::SysCtrlToNavCPU_ComputerState;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.SysCtrlToNavCPU.state)
//  return state_;
//}
//inline ::monarcpb::SysCtrlToNavCPU_ComputerState* SysCtrlToNavCPU::release_state() {
//  // @@protoc_insertion_point(field_release:monarcpb.SysCtrlToNavCPU.state)
//
//  ::monarcpb::SysCtrlToNavCPU_ComputerState* temp = state_;
//  state_ = NULL;
//  return temp;
//}
//inline void SysCtrlToNavCPU::set_allocated_state(::monarcpb::SysCtrlToNavCPU_ComputerState* state) {
//  delete state_;
//  state_ = state;
//  if (state) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.SysCtrlToNavCPU.state)
//}
//
//// optional .monarcpb.SysCtrlToNavCPU.FlightControl control = 3;
//inline bool SysCtrlToNavCPU::has_control() const {
//  return !_is_default_instance_ && control_ != NULL;
//}
//inline void SysCtrlToNavCPU::clear_control() {
//  if (GetArenaNoVirtual() == NULL && control_ != NULL) delete control_;
//  control_ = NULL;
//}
//inline const ::monarcpb::SysCtrlToNavCPU_FlightControl& SysCtrlToNavCPU::control() const {
//  // @@protoc_insertion_point(field_get:monarcpb.SysCtrlToNavCPU.control)
//  return control_ != NULL ? *control_ : *default_instance_->control_;
//}
//inline ::monarcpb::SysCtrlToNavCPU_FlightControl* SysCtrlToNavCPU::mutable_control() {
//
//  if (control_ == NULL) {
//    control_ = new ::monarcpb::SysCtrlToNavCPU_FlightControl;
//  }
//  // @@protoc_insertion_point(field_mutable:monarcpb.SysCtrlToNavCPU.control)
//  return control_;
//}
//inline ::monarcpb::SysCtrlToNavCPU_FlightControl* SysCtrlToNavCPU::release_control() {
//  // @@protoc_insertion_point(field_release:monarcpb.SysCtrlToNavCPU.control)
//
//  ::monarcpb::SysCtrlToNavCPU_FlightControl* temp = control_;
//  control_ = NULL;
//  return temp;
//}
//inline void SysCtrlToNavCPU::set_allocated_control(::monarcpb::SysCtrlToNavCPU_FlightControl* control) {
//  delete control_;
//  control_ = control;
//  if (control) {
//
//  } else {
//
//  }
//  // @@protoc_insertion_point(field_set_allocated:monarcpb.SysCtrlToNavCPU.control)
//}
//
//#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
//// -------------------------------------------------------------------
//
//// -------------------------------------------------------------------
//
//// -------------------------------------------------------------------
//
//// -------------------------------------------------------------------
//
//// -------------------------------------------------------------------
//
//// -------------------------------------------------------------------
//
//// -------------------------------------------------------------------
//
//// -------------------------------------------------------------------
//
//
//// @@protoc_insertion_point(namespace_scope)
//
//}  // namespace monarcpb
//
//// @@protoc_insertion_point(global_scope)
//
//#endif  // PROTOBUF_api_2eproto__INCLUDED
